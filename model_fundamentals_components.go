/*
eodhistoricaldata

eodhistoricaldata API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsComponents struct for FundamentalsComponents
type FundamentalsComponents struct {
	Code     *string `json:"Code,omitempty"`
	Exchange *string `json:"Exchange,omitempty"`
	Name     *string `json:"Name,omitempty"`
	Sector   *string `json:"Sector,omitempty"`
	Industry *string `json:"Industry,omitempty"`
}

// NewFundamentalsComponents instantiates a new FundamentalsComponents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsComponents() *FundamentalsComponents {
	this := FundamentalsComponents{}
	return &this
}

// NewFundamentalsComponentsWithDefaults instantiates a new FundamentalsComponents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsComponentsWithDefaults() *FundamentalsComponents {
	this := FundamentalsComponents{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FundamentalsComponents) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsComponents) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FundamentalsComponents) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FundamentalsComponents) SetCode(v string) {
	o.Code = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *FundamentalsComponents) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsComponents) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *FundamentalsComponents) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *FundamentalsComponents) SetExchange(v string) {
	o.Exchange = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FundamentalsComponents) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsComponents) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FundamentalsComponents) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FundamentalsComponents) SetName(v string) {
	o.Name = &v
}

// GetSector returns the Sector field value if set, zero value otherwise.
func (o *FundamentalsComponents) GetSector() string {
	if o == nil || o.Sector == nil {
		var ret string
		return ret
	}
	return *o.Sector
}

// GetSectorOk returns a tuple with the Sector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsComponents) GetSectorOk() (*string, bool) {
	if o == nil || o.Sector == nil {
		return nil, false
	}
	return o.Sector, true
}

// HasSector returns a boolean if a field has been set.
func (o *FundamentalsComponents) HasSector() bool {
	if o != nil && o.Sector != nil {
		return true
	}

	return false
}

// SetSector gets a reference to the given string and assigns it to the Sector field.
func (o *FundamentalsComponents) SetSector(v string) {
	o.Sector = &v
}

// GetIndustry returns the Industry field value if set, zero value otherwise.
func (o *FundamentalsComponents) GetIndustry() string {
	if o == nil || o.Industry == nil {
		var ret string
		return ret
	}
	return *o.Industry
}

// GetIndustryOk returns a tuple with the Industry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsComponents) GetIndustryOk() (*string, bool) {
	if o == nil || o.Industry == nil {
		return nil, false
	}
	return o.Industry, true
}

// HasIndustry returns a boolean if a field has been set.
func (o *FundamentalsComponents) HasIndustry() bool {
	if o != nil && o.Industry != nil {
		return true
	}

	return false
}

// SetIndustry gets a reference to the given string and assigns it to the Industry field.
func (o *FundamentalsComponents) SetIndustry(v string) {
	o.Industry = &v
}

func (o FundamentalsComponents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["Code"] = o.Code
	}
	if o.Exchange != nil {
		toSerialize["Exchange"] = o.Exchange
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Sector != nil {
		toSerialize["Sector"] = o.Sector
	}
	if o.Industry != nil {
		toSerialize["Industry"] = o.Industry
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsComponents struct {
	value *FundamentalsComponents
	isSet bool
}

func (v NullableFundamentalsComponents) Get() *FundamentalsComponents {
	return v.value
}

func (v *NullableFundamentalsComponents) Set(val *FundamentalsComponents) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsComponents) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsComponents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsComponents(val *FundamentalsComponents) *NullableFundamentalsComponents {
	return &NullableFundamentalsComponents{value: val, isSet: true}
}

func (v NullableFundamentalsComponents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsComponents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
