/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsFinancialsBalanceSheet struct for FundamentalsFinancialsBalanceSheet
type FundamentalsFinancialsBalanceSheet struct {
	CurrencySymbol *string `json:"currency_symbol,omitempty"`
}

// NewFundamentalsFinancialsBalanceSheet instantiates a new FundamentalsFinancialsBalanceSheet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsFinancialsBalanceSheet() *FundamentalsFinancialsBalanceSheet {
	this := FundamentalsFinancialsBalanceSheet{}
	return &this
}

// NewFundamentalsFinancialsBalanceSheetWithDefaults instantiates a new FundamentalsFinancialsBalanceSheet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsFinancialsBalanceSheetWithDefaults() *FundamentalsFinancialsBalanceSheet {
	this := FundamentalsFinancialsBalanceSheet{}
	return &this
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *FundamentalsFinancialsBalanceSheet) GetCurrencySymbol() string {
	if o == nil || o.CurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsFinancialsBalanceSheet) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || o.CurrencySymbol == nil {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *FundamentalsFinancialsBalanceSheet) HasCurrencySymbol() bool {
	if o != nil && o.CurrencySymbol != nil {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *FundamentalsFinancialsBalanceSheet) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

func (o FundamentalsFinancialsBalanceSheet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrencySymbol != nil {
		toSerialize["currency_symbol"] = o.CurrencySymbol
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsFinancialsBalanceSheet struct {
	value *FundamentalsFinancialsBalanceSheet
	isSet bool
}

func (v NullableFundamentalsFinancialsBalanceSheet) Get() *FundamentalsFinancialsBalanceSheet {
	return v.value
}

func (v *NullableFundamentalsFinancialsBalanceSheet) Set(val *FundamentalsFinancialsBalanceSheet) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsFinancialsBalanceSheet) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsFinancialsBalanceSheet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsFinancialsBalanceSheet(val *FundamentalsFinancialsBalanceSheet) *NullableFundamentalsFinancialsBalanceSheet {
	return &NullableFundamentalsFinancialsBalanceSheet{value: val, isSet: true}
}

func (v NullableFundamentalsFinancialsBalanceSheet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsFinancialsBalanceSheet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
