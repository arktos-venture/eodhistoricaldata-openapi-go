/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsFinancial struct for FundamentalsFinancial
type FundamentalsFinancial struct {
	Date                                             *string        `json:"date,omitempty"`
	FilingDate                                       *string        `json:"filing_date,omitempty"`
	CurrencySymbol                                   NullableString `json:"currency_symbol,omitempty"`
	TotalAssets                                      NullableString `json:"totalAssets,omitempty"`
	IntangibleAssets                                 NullableString `json:"intangibleAssets,omitempty"`
	EarningAssets                                    NullableString `json:"earningAssets,omitempty"`
	OtherCurrentAssets                               NullableString `json:"otherCurrentAssets,omitempty"`
	TotalLiab                                        NullableString `json:"totalLiab,omitempty"`
	TotalStockholderEquity                           NullableString `json:"totalStockholderEquity,omitempty"`
	DeferredLongTermLiab                             NullableString `json:"deferredLongTermLiab,omitempty"`
	OtherCurrentLiab                                 NullableString `json:"otherCurrentLiab,omitempty"`
	CommonStock                                      NullableString `json:"commonStock,omitempty"`
	RetainedEarnings                                 NullableString `json:"retainedEarnings,omitempty"`
	OtherLiab                                        NullableString `json:"otherLiab,omitempty"`
	GoodWill                                         NullableString `json:"goodWill,omitempty"`
	OtherAssets                                      NullableString `json:"otherAssets,omitempty"`
	Cash                                             NullableString `json:"cash,omitempty"`
	TotalCurrentLiabilities                          NullableString `json:"totalCurrentLiabilities,omitempty"`
	NetDebt                                          NullableString `json:"netDebt,omitempty"`
	ShortTermDebt                                    NullableString `json:"shortTermDebt,omitempty"`
	ShortLongTermDebt                                NullableString `json:"shortLongTermDebt,omitempty"`
	ShortLongTermDebtTotal                           NullableString `json:"shortLongTermDebtTotal,omitempty"`
	OtherStockholderEquity                           NullableString `json:"otherStockholderEquity,omitempty"`
	PropertyPlantEquipment                           NullableString `json:"propertyPlantEquipment,omitempty"`
	TotalCurrentAssets                               NullableString `json:"totalCurrentAssets,omitempty"`
	LongTermInvestments                              NullableString `json:"longTermInvestments,omitempty"`
	NetTangibleAssets                                NullableString `json:"netTangibleAssets,omitempty"`
	ShortTermInvestments                             NullableString `json:"shortTermInvestments,omitempty"`
	NetReceivables                                   NullableString `json:"netReceivables,omitempty"`
	LongTermDebt                                     NullableString `json:"longTermDebt,omitempty"`
	Inventory                                        NullableString `json:"inventory,omitempty"`
	AccountsPayable                                  NullableString `json:"accountsPayable,omitempty"`
	TotalPermanentEquity                             NullableString `json:"totalPermanentEquity,omitempty"`
	NoncontrollingInterestInConsolidatedEntity       NullableString `json:"noncontrollingInterestInConsolidatedEntity,omitempty"`
	TemporaryEquityRedeemableNoncontrollingInterests NullableString `json:"temporaryEquityRedeemableNoncontrollingInterests,omitempty"`
	AccumulatedOtherComprehensiveIncome              NullableString `json:"accumulatedOtherComprehensiveIncome,omitempty"`
	AdditionalPaidInCapital                          NullableString `json:"additionalPaidInCapital,omitempty"`
	CommonStockTotalEquity                           NullableString `json:"commonStockTotalEquity,omitempty"`
	PreferredStockTotalEquity                        NullableString `json:"preferredStockTotalEquity,omitempty"`
	RetainedEarningsTotalEquity                      NullableString `json:"retainedEarningsTotalEquity,omitempty"`
	TreasuryStock                                    NullableString `json:"treasuryStock,omitempty"`
	AccumulatedAmortization                          NullableString `json:"accumulatedAmortization,omitempty"`
	NonCurrrentAssetsOther                           NullableString `json:"nonCurrrentAssetsOther,omitempty"`
	DeferredLongTermAssetCharges                     NullableString `json:"deferredLongTermAssetCharges,omitempty"`
	NonCurrentAssetsTotal                            NullableString `json:"nonCurrentAssetsTotal,omitempty"`
	CapitalLeaseObligations                          NullableString `json:"capitalLeaseObligations,omitempty"`
	LongTermDebtTotal                                NullableString `json:"longTermDebtTotal,omitempty"`
	NonCurrentLiabilitiesOther                       NullableString `json:"nonCurrentLiabilitiesOther,omitempty"`
	NonCurrentLiabilitiesTotal                       NullableString `json:"nonCurrentLiabilitiesTotal,omitempty"`
	NegativeGoodwill                                 NullableString `json:"negativeGoodwill,omitempty"`
	Warrants                                         NullableString `json:"warrants,omitempty"`
	PreferredStockRedeemable                         NullableString `json:"preferredStockRedeemable,omitempty"`
	CapitalSurpluse                                  NullableString `json:"capitalSurpluse,omitempty"`
	LiabilitiesAndStockholdersEquity                 NullableString `json:"liabilitiesAndStockholdersEquity,omitempty"`
	CashAndShortTermInvestments                      NullableString `json:"cashAndShortTermInvestments,omitempty"`
	PropertyPlantAndEquipmentGross                   NullableString `json:"propertyPlantAndEquipmentGross,omitempty"`
	AccumulatedDepreciation                          NullableString `json:"accumulatedDepreciation,omitempty"`
	NetWorkingCapital                                NullableString `json:"netWorkingCapital,omitempty"`
	NetInvestedCapital                               NullableString `json:"netInvestedCapital,omitempty"`
	CommonStockSharesOutstanding                     NullableString `json:"commonStockSharesOutstanding,omitempty"`
}

// NewFundamentalsFinancial instantiates a new FundamentalsFinancial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsFinancial() *FundamentalsFinancial {
	this := FundamentalsFinancial{}
	return &this
}

// NewFundamentalsFinancialWithDefaults instantiates a new FundamentalsFinancial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsFinancialWithDefaults() *FundamentalsFinancial {
	this := FundamentalsFinancial{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *FundamentalsFinancial) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsFinancial) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *FundamentalsFinancial) SetDate(v string) {
	o.Date = &v
}

// GetFilingDate returns the FilingDate field value if set, zero value otherwise.
func (o *FundamentalsFinancial) GetFilingDate() string {
	if o == nil || o.FilingDate == nil {
		var ret string
		return ret
	}
	return *o.FilingDate
}

// GetFilingDateOk returns a tuple with the FilingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsFinancial) GetFilingDateOk() (*string, bool) {
	if o == nil || o.FilingDate == nil {
		return nil, false
	}
	return o.FilingDate, true
}

// HasFilingDate returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasFilingDate() bool {
	if o != nil && o.FilingDate != nil {
		return true
	}

	return false
}

// SetFilingDate gets a reference to the given string and assigns it to the FilingDate field.
func (o *FundamentalsFinancial) SetFilingDate(v string) {
	o.FilingDate = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetCurrencySymbol() string {
	if o == nil || o.CurrencySymbol.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrencySymbol.Get()
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetCurrencySymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencySymbol.Get(), o.CurrencySymbol.IsSet()
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasCurrencySymbol() bool {
	if o != nil && o.CurrencySymbol.IsSet() {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given NullableString and assigns it to the CurrencySymbol field.
func (o *FundamentalsFinancial) SetCurrencySymbol(v string) {
	o.CurrencySymbol.Set(&v)
}

// SetCurrencySymbolNil sets the value for CurrencySymbol to be an explicit nil
func (o *FundamentalsFinancial) SetCurrencySymbolNil() {
	o.CurrencySymbol.Set(nil)
}

// UnsetCurrencySymbol ensures that no value is present for CurrencySymbol, not even an explicit nil
func (o *FundamentalsFinancial) UnsetCurrencySymbol() {
	o.CurrencySymbol.Unset()
}

// GetTotalAssets returns the TotalAssets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetTotalAssets() string {
	if o == nil || o.TotalAssets.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalAssets.Get()
}

// GetTotalAssetsOk returns a tuple with the TotalAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetTotalAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalAssets.Get(), o.TotalAssets.IsSet()
}

// HasTotalAssets returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasTotalAssets() bool {
	if o != nil && o.TotalAssets.IsSet() {
		return true
	}

	return false
}

// SetTotalAssets gets a reference to the given NullableString and assigns it to the TotalAssets field.
func (o *FundamentalsFinancial) SetTotalAssets(v string) {
	o.TotalAssets.Set(&v)
}

// SetTotalAssetsNil sets the value for TotalAssets to be an explicit nil
func (o *FundamentalsFinancial) SetTotalAssetsNil() {
	o.TotalAssets.Set(nil)
}

// UnsetTotalAssets ensures that no value is present for TotalAssets, not even an explicit nil
func (o *FundamentalsFinancial) UnsetTotalAssets() {
	o.TotalAssets.Unset()
}

// GetIntangibleAssets returns the IntangibleAssets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetIntangibleAssets() string {
	if o == nil || o.IntangibleAssets.Get() == nil {
		var ret string
		return ret
	}
	return *o.IntangibleAssets.Get()
}

// GetIntangibleAssetsOk returns a tuple with the IntangibleAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetIntangibleAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntangibleAssets.Get(), o.IntangibleAssets.IsSet()
}

// HasIntangibleAssets returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasIntangibleAssets() bool {
	if o != nil && o.IntangibleAssets.IsSet() {
		return true
	}

	return false
}

// SetIntangibleAssets gets a reference to the given NullableString and assigns it to the IntangibleAssets field.
func (o *FundamentalsFinancial) SetIntangibleAssets(v string) {
	o.IntangibleAssets.Set(&v)
}

// SetIntangibleAssetsNil sets the value for IntangibleAssets to be an explicit nil
func (o *FundamentalsFinancial) SetIntangibleAssetsNil() {
	o.IntangibleAssets.Set(nil)
}

// UnsetIntangibleAssets ensures that no value is present for IntangibleAssets, not even an explicit nil
func (o *FundamentalsFinancial) UnsetIntangibleAssets() {
	o.IntangibleAssets.Unset()
}

// GetEarningAssets returns the EarningAssets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetEarningAssets() string {
	if o == nil || o.EarningAssets.Get() == nil {
		var ret string
		return ret
	}
	return *o.EarningAssets.Get()
}

// GetEarningAssetsOk returns a tuple with the EarningAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetEarningAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EarningAssets.Get(), o.EarningAssets.IsSet()
}

// HasEarningAssets returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasEarningAssets() bool {
	if o != nil && o.EarningAssets.IsSet() {
		return true
	}

	return false
}

// SetEarningAssets gets a reference to the given NullableString and assigns it to the EarningAssets field.
func (o *FundamentalsFinancial) SetEarningAssets(v string) {
	o.EarningAssets.Set(&v)
}

// SetEarningAssetsNil sets the value for EarningAssets to be an explicit nil
func (o *FundamentalsFinancial) SetEarningAssetsNil() {
	o.EarningAssets.Set(nil)
}

// UnsetEarningAssets ensures that no value is present for EarningAssets, not even an explicit nil
func (o *FundamentalsFinancial) UnsetEarningAssets() {
	o.EarningAssets.Unset()
}

// GetOtherCurrentAssets returns the OtherCurrentAssets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetOtherCurrentAssets() string {
	if o == nil || o.OtherCurrentAssets.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtherCurrentAssets.Get()
}

// GetOtherCurrentAssetsOk returns a tuple with the OtherCurrentAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetOtherCurrentAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherCurrentAssets.Get(), o.OtherCurrentAssets.IsSet()
}

// HasOtherCurrentAssets returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasOtherCurrentAssets() bool {
	if o != nil && o.OtherCurrentAssets.IsSet() {
		return true
	}

	return false
}

// SetOtherCurrentAssets gets a reference to the given NullableString and assigns it to the OtherCurrentAssets field.
func (o *FundamentalsFinancial) SetOtherCurrentAssets(v string) {
	o.OtherCurrentAssets.Set(&v)
}

// SetOtherCurrentAssetsNil sets the value for OtherCurrentAssets to be an explicit nil
func (o *FundamentalsFinancial) SetOtherCurrentAssetsNil() {
	o.OtherCurrentAssets.Set(nil)
}

// UnsetOtherCurrentAssets ensures that no value is present for OtherCurrentAssets, not even an explicit nil
func (o *FundamentalsFinancial) UnsetOtherCurrentAssets() {
	o.OtherCurrentAssets.Unset()
}

// GetTotalLiab returns the TotalLiab field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetTotalLiab() string {
	if o == nil || o.TotalLiab.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalLiab.Get()
}

// GetTotalLiabOk returns a tuple with the TotalLiab field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetTotalLiabOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalLiab.Get(), o.TotalLiab.IsSet()
}

// HasTotalLiab returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasTotalLiab() bool {
	if o != nil && o.TotalLiab.IsSet() {
		return true
	}

	return false
}

// SetTotalLiab gets a reference to the given NullableString and assigns it to the TotalLiab field.
func (o *FundamentalsFinancial) SetTotalLiab(v string) {
	o.TotalLiab.Set(&v)
}

// SetTotalLiabNil sets the value for TotalLiab to be an explicit nil
func (o *FundamentalsFinancial) SetTotalLiabNil() {
	o.TotalLiab.Set(nil)
}

// UnsetTotalLiab ensures that no value is present for TotalLiab, not even an explicit nil
func (o *FundamentalsFinancial) UnsetTotalLiab() {
	o.TotalLiab.Unset()
}

// GetTotalStockholderEquity returns the TotalStockholderEquity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetTotalStockholderEquity() string {
	if o == nil || o.TotalStockholderEquity.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalStockholderEquity.Get()
}

// GetTotalStockholderEquityOk returns a tuple with the TotalStockholderEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetTotalStockholderEquityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalStockholderEquity.Get(), o.TotalStockholderEquity.IsSet()
}

// HasTotalStockholderEquity returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasTotalStockholderEquity() bool {
	if o != nil && o.TotalStockholderEquity.IsSet() {
		return true
	}

	return false
}

// SetTotalStockholderEquity gets a reference to the given NullableString and assigns it to the TotalStockholderEquity field.
func (o *FundamentalsFinancial) SetTotalStockholderEquity(v string) {
	o.TotalStockholderEquity.Set(&v)
}

// SetTotalStockholderEquityNil sets the value for TotalStockholderEquity to be an explicit nil
func (o *FundamentalsFinancial) SetTotalStockholderEquityNil() {
	o.TotalStockholderEquity.Set(nil)
}

// UnsetTotalStockholderEquity ensures that no value is present for TotalStockholderEquity, not even an explicit nil
func (o *FundamentalsFinancial) UnsetTotalStockholderEquity() {
	o.TotalStockholderEquity.Unset()
}

// GetDeferredLongTermLiab returns the DeferredLongTermLiab field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetDeferredLongTermLiab() string {
	if o == nil || o.DeferredLongTermLiab.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeferredLongTermLiab.Get()
}

// GetDeferredLongTermLiabOk returns a tuple with the DeferredLongTermLiab field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetDeferredLongTermLiabOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeferredLongTermLiab.Get(), o.DeferredLongTermLiab.IsSet()
}

// HasDeferredLongTermLiab returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasDeferredLongTermLiab() bool {
	if o != nil && o.DeferredLongTermLiab.IsSet() {
		return true
	}

	return false
}

// SetDeferredLongTermLiab gets a reference to the given NullableString and assigns it to the DeferredLongTermLiab field.
func (o *FundamentalsFinancial) SetDeferredLongTermLiab(v string) {
	o.DeferredLongTermLiab.Set(&v)
}

// SetDeferredLongTermLiabNil sets the value for DeferredLongTermLiab to be an explicit nil
func (o *FundamentalsFinancial) SetDeferredLongTermLiabNil() {
	o.DeferredLongTermLiab.Set(nil)
}

// UnsetDeferredLongTermLiab ensures that no value is present for DeferredLongTermLiab, not even an explicit nil
func (o *FundamentalsFinancial) UnsetDeferredLongTermLiab() {
	o.DeferredLongTermLiab.Unset()
}

// GetOtherCurrentLiab returns the OtherCurrentLiab field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetOtherCurrentLiab() string {
	if o == nil || o.OtherCurrentLiab.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtherCurrentLiab.Get()
}

// GetOtherCurrentLiabOk returns a tuple with the OtherCurrentLiab field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetOtherCurrentLiabOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherCurrentLiab.Get(), o.OtherCurrentLiab.IsSet()
}

// HasOtherCurrentLiab returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasOtherCurrentLiab() bool {
	if o != nil && o.OtherCurrentLiab.IsSet() {
		return true
	}

	return false
}

// SetOtherCurrentLiab gets a reference to the given NullableString and assigns it to the OtherCurrentLiab field.
func (o *FundamentalsFinancial) SetOtherCurrentLiab(v string) {
	o.OtherCurrentLiab.Set(&v)
}

// SetOtherCurrentLiabNil sets the value for OtherCurrentLiab to be an explicit nil
func (o *FundamentalsFinancial) SetOtherCurrentLiabNil() {
	o.OtherCurrentLiab.Set(nil)
}

// UnsetOtherCurrentLiab ensures that no value is present for OtherCurrentLiab, not even an explicit nil
func (o *FundamentalsFinancial) UnsetOtherCurrentLiab() {
	o.OtherCurrentLiab.Unset()
}

// GetCommonStock returns the CommonStock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetCommonStock() string {
	if o == nil || o.CommonStock.Get() == nil {
		var ret string
		return ret
	}
	return *o.CommonStock.Get()
}

// GetCommonStockOk returns a tuple with the CommonStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetCommonStockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommonStock.Get(), o.CommonStock.IsSet()
}

// HasCommonStock returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasCommonStock() bool {
	if o != nil && o.CommonStock.IsSet() {
		return true
	}

	return false
}

// SetCommonStock gets a reference to the given NullableString and assigns it to the CommonStock field.
func (o *FundamentalsFinancial) SetCommonStock(v string) {
	o.CommonStock.Set(&v)
}

// SetCommonStockNil sets the value for CommonStock to be an explicit nil
func (o *FundamentalsFinancial) SetCommonStockNil() {
	o.CommonStock.Set(nil)
}

// UnsetCommonStock ensures that no value is present for CommonStock, not even an explicit nil
func (o *FundamentalsFinancial) UnsetCommonStock() {
	o.CommonStock.Unset()
}

// GetRetainedEarnings returns the RetainedEarnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetRetainedEarnings() string {
	if o == nil || o.RetainedEarnings.Get() == nil {
		var ret string
		return ret
	}
	return *o.RetainedEarnings.Get()
}

// GetRetainedEarningsOk returns a tuple with the RetainedEarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetRetainedEarningsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetainedEarnings.Get(), o.RetainedEarnings.IsSet()
}

// HasRetainedEarnings returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasRetainedEarnings() bool {
	if o != nil && o.RetainedEarnings.IsSet() {
		return true
	}

	return false
}

// SetRetainedEarnings gets a reference to the given NullableString and assigns it to the RetainedEarnings field.
func (o *FundamentalsFinancial) SetRetainedEarnings(v string) {
	o.RetainedEarnings.Set(&v)
}

// SetRetainedEarningsNil sets the value for RetainedEarnings to be an explicit nil
func (o *FundamentalsFinancial) SetRetainedEarningsNil() {
	o.RetainedEarnings.Set(nil)
}

// UnsetRetainedEarnings ensures that no value is present for RetainedEarnings, not even an explicit nil
func (o *FundamentalsFinancial) UnsetRetainedEarnings() {
	o.RetainedEarnings.Unset()
}

// GetOtherLiab returns the OtherLiab field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetOtherLiab() string {
	if o == nil || o.OtherLiab.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtherLiab.Get()
}

// GetOtherLiabOk returns a tuple with the OtherLiab field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetOtherLiabOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherLiab.Get(), o.OtherLiab.IsSet()
}

// HasOtherLiab returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasOtherLiab() bool {
	if o != nil && o.OtherLiab.IsSet() {
		return true
	}

	return false
}

// SetOtherLiab gets a reference to the given NullableString and assigns it to the OtherLiab field.
func (o *FundamentalsFinancial) SetOtherLiab(v string) {
	o.OtherLiab.Set(&v)
}

// SetOtherLiabNil sets the value for OtherLiab to be an explicit nil
func (o *FundamentalsFinancial) SetOtherLiabNil() {
	o.OtherLiab.Set(nil)
}

// UnsetOtherLiab ensures that no value is present for OtherLiab, not even an explicit nil
func (o *FundamentalsFinancial) UnsetOtherLiab() {
	o.OtherLiab.Unset()
}

// GetGoodWill returns the GoodWill field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetGoodWill() string {
	if o == nil || o.GoodWill.Get() == nil {
		var ret string
		return ret
	}
	return *o.GoodWill.Get()
}

// GetGoodWillOk returns a tuple with the GoodWill field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetGoodWillOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GoodWill.Get(), o.GoodWill.IsSet()
}

// HasGoodWill returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasGoodWill() bool {
	if o != nil && o.GoodWill.IsSet() {
		return true
	}

	return false
}

// SetGoodWill gets a reference to the given NullableString and assigns it to the GoodWill field.
func (o *FundamentalsFinancial) SetGoodWill(v string) {
	o.GoodWill.Set(&v)
}

// SetGoodWillNil sets the value for GoodWill to be an explicit nil
func (o *FundamentalsFinancial) SetGoodWillNil() {
	o.GoodWill.Set(nil)
}

// UnsetGoodWill ensures that no value is present for GoodWill, not even an explicit nil
func (o *FundamentalsFinancial) UnsetGoodWill() {
	o.GoodWill.Unset()
}

// GetOtherAssets returns the OtherAssets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetOtherAssets() string {
	if o == nil || o.OtherAssets.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtherAssets.Get()
}

// GetOtherAssetsOk returns a tuple with the OtherAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetOtherAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherAssets.Get(), o.OtherAssets.IsSet()
}

// HasOtherAssets returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasOtherAssets() bool {
	if o != nil && o.OtherAssets.IsSet() {
		return true
	}

	return false
}

// SetOtherAssets gets a reference to the given NullableString and assigns it to the OtherAssets field.
func (o *FundamentalsFinancial) SetOtherAssets(v string) {
	o.OtherAssets.Set(&v)
}

// SetOtherAssetsNil sets the value for OtherAssets to be an explicit nil
func (o *FundamentalsFinancial) SetOtherAssetsNil() {
	o.OtherAssets.Set(nil)
}

// UnsetOtherAssets ensures that no value is present for OtherAssets, not even an explicit nil
func (o *FundamentalsFinancial) UnsetOtherAssets() {
	o.OtherAssets.Unset()
}

// GetCash returns the Cash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetCash() string {
	if o == nil || o.Cash.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cash.Get()
}

// GetCashOk returns a tuple with the Cash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetCashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cash.Get(), o.Cash.IsSet()
}

// HasCash returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasCash() bool {
	if o != nil && o.Cash.IsSet() {
		return true
	}

	return false
}

// SetCash gets a reference to the given NullableString and assigns it to the Cash field.
func (o *FundamentalsFinancial) SetCash(v string) {
	o.Cash.Set(&v)
}

// SetCashNil sets the value for Cash to be an explicit nil
func (o *FundamentalsFinancial) SetCashNil() {
	o.Cash.Set(nil)
}

// UnsetCash ensures that no value is present for Cash, not even an explicit nil
func (o *FundamentalsFinancial) UnsetCash() {
	o.Cash.Unset()
}

// GetTotalCurrentLiabilities returns the TotalCurrentLiabilities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetTotalCurrentLiabilities() string {
	if o == nil || o.TotalCurrentLiabilities.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalCurrentLiabilities.Get()
}

// GetTotalCurrentLiabilitiesOk returns a tuple with the TotalCurrentLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetTotalCurrentLiabilitiesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalCurrentLiabilities.Get(), o.TotalCurrentLiabilities.IsSet()
}

// HasTotalCurrentLiabilities returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasTotalCurrentLiabilities() bool {
	if o != nil && o.TotalCurrentLiabilities.IsSet() {
		return true
	}

	return false
}

// SetTotalCurrentLiabilities gets a reference to the given NullableString and assigns it to the TotalCurrentLiabilities field.
func (o *FundamentalsFinancial) SetTotalCurrentLiabilities(v string) {
	o.TotalCurrentLiabilities.Set(&v)
}

// SetTotalCurrentLiabilitiesNil sets the value for TotalCurrentLiabilities to be an explicit nil
func (o *FundamentalsFinancial) SetTotalCurrentLiabilitiesNil() {
	o.TotalCurrentLiabilities.Set(nil)
}

// UnsetTotalCurrentLiabilities ensures that no value is present for TotalCurrentLiabilities, not even an explicit nil
func (o *FundamentalsFinancial) UnsetTotalCurrentLiabilities() {
	o.TotalCurrentLiabilities.Unset()
}

// GetNetDebt returns the NetDebt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNetDebt() string {
	if o == nil || o.NetDebt.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetDebt.Get()
}

// GetNetDebtOk returns a tuple with the NetDebt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNetDebtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetDebt.Get(), o.NetDebt.IsSet()
}

// HasNetDebt returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNetDebt() bool {
	if o != nil && o.NetDebt.IsSet() {
		return true
	}

	return false
}

// SetNetDebt gets a reference to the given NullableString and assigns it to the NetDebt field.
func (o *FundamentalsFinancial) SetNetDebt(v string) {
	o.NetDebt.Set(&v)
}

// SetNetDebtNil sets the value for NetDebt to be an explicit nil
func (o *FundamentalsFinancial) SetNetDebtNil() {
	o.NetDebt.Set(nil)
}

// UnsetNetDebt ensures that no value is present for NetDebt, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNetDebt() {
	o.NetDebt.Unset()
}

// GetShortTermDebt returns the ShortTermDebt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetShortTermDebt() string {
	if o == nil || o.ShortTermDebt.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShortTermDebt.Get()
}

// GetShortTermDebtOk returns a tuple with the ShortTermDebt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetShortTermDebtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortTermDebt.Get(), o.ShortTermDebt.IsSet()
}

// HasShortTermDebt returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasShortTermDebt() bool {
	if o != nil && o.ShortTermDebt.IsSet() {
		return true
	}

	return false
}

// SetShortTermDebt gets a reference to the given NullableString and assigns it to the ShortTermDebt field.
func (o *FundamentalsFinancial) SetShortTermDebt(v string) {
	o.ShortTermDebt.Set(&v)
}

// SetShortTermDebtNil sets the value for ShortTermDebt to be an explicit nil
func (o *FundamentalsFinancial) SetShortTermDebtNil() {
	o.ShortTermDebt.Set(nil)
}

// UnsetShortTermDebt ensures that no value is present for ShortTermDebt, not even an explicit nil
func (o *FundamentalsFinancial) UnsetShortTermDebt() {
	o.ShortTermDebt.Unset()
}

// GetShortLongTermDebt returns the ShortLongTermDebt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetShortLongTermDebt() string {
	if o == nil || o.ShortLongTermDebt.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShortLongTermDebt.Get()
}

// GetShortLongTermDebtOk returns a tuple with the ShortLongTermDebt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetShortLongTermDebtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortLongTermDebt.Get(), o.ShortLongTermDebt.IsSet()
}

// HasShortLongTermDebt returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasShortLongTermDebt() bool {
	if o != nil && o.ShortLongTermDebt.IsSet() {
		return true
	}

	return false
}

// SetShortLongTermDebt gets a reference to the given NullableString and assigns it to the ShortLongTermDebt field.
func (o *FundamentalsFinancial) SetShortLongTermDebt(v string) {
	o.ShortLongTermDebt.Set(&v)
}

// SetShortLongTermDebtNil sets the value for ShortLongTermDebt to be an explicit nil
func (o *FundamentalsFinancial) SetShortLongTermDebtNil() {
	o.ShortLongTermDebt.Set(nil)
}

// UnsetShortLongTermDebt ensures that no value is present for ShortLongTermDebt, not even an explicit nil
func (o *FundamentalsFinancial) UnsetShortLongTermDebt() {
	o.ShortLongTermDebt.Unset()
}

// GetShortLongTermDebtTotal returns the ShortLongTermDebtTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetShortLongTermDebtTotal() string {
	if o == nil || o.ShortLongTermDebtTotal.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShortLongTermDebtTotal.Get()
}

// GetShortLongTermDebtTotalOk returns a tuple with the ShortLongTermDebtTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetShortLongTermDebtTotalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortLongTermDebtTotal.Get(), o.ShortLongTermDebtTotal.IsSet()
}

// HasShortLongTermDebtTotal returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasShortLongTermDebtTotal() bool {
	if o != nil && o.ShortLongTermDebtTotal.IsSet() {
		return true
	}

	return false
}

// SetShortLongTermDebtTotal gets a reference to the given NullableString and assigns it to the ShortLongTermDebtTotal field.
func (o *FundamentalsFinancial) SetShortLongTermDebtTotal(v string) {
	o.ShortLongTermDebtTotal.Set(&v)
}

// SetShortLongTermDebtTotalNil sets the value for ShortLongTermDebtTotal to be an explicit nil
func (o *FundamentalsFinancial) SetShortLongTermDebtTotalNil() {
	o.ShortLongTermDebtTotal.Set(nil)
}

// UnsetShortLongTermDebtTotal ensures that no value is present for ShortLongTermDebtTotal, not even an explicit nil
func (o *FundamentalsFinancial) UnsetShortLongTermDebtTotal() {
	o.ShortLongTermDebtTotal.Unset()
}

// GetOtherStockholderEquity returns the OtherStockholderEquity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetOtherStockholderEquity() string {
	if o == nil || o.OtherStockholderEquity.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtherStockholderEquity.Get()
}

// GetOtherStockholderEquityOk returns a tuple with the OtherStockholderEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetOtherStockholderEquityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherStockholderEquity.Get(), o.OtherStockholderEquity.IsSet()
}

// HasOtherStockholderEquity returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasOtherStockholderEquity() bool {
	if o != nil && o.OtherStockholderEquity.IsSet() {
		return true
	}

	return false
}

// SetOtherStockholderEquity gets a reference to the given NullableString and assigns it to the OtherStockholderEquity field.
func (o *FundamentalsFinancial) SetOtherStockholderEquity(v string) {
	o.OtherStockholderEquity.Set(&v)
}

// SetOtherStockholderEquityNil sets the value for OtherStockholderEquity to be an explicit nil
func (o *FundamentalsFinancial) SetOtherStockholderEquityNil() {
	o.OtherStockholderEquity.Set(nil)
}

// UnsetOtherStockholderEquity ensures that no value is present for OtherStockholderEquity, not even an explicit nil
func (o *FundamentalsFinancial) UnsetOtherStockholderEquity() {
	o.OtherStockholderEquity.Unset()
}

// GetPropertyPlantEquipment returns the PropertyPlantEquipment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetPropertyPlantEquipment() string {
	if o == nil || o.PropertyPlantEquipment.Get() == nil {
		var ret string
		return ret
	}
	return *o.PropertyPlantEquipment.Get()
}

// GetPropertyPlantEquipmentOk returns a tuple with the PropertyPlantEquipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetPropertyPlantEquipmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertyPlantEquipment.Get(), o.PropertyPlantEquipment.IsSet()
}

// HasPropertyPlantEquipment returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasPropertyPlantEquipment() bool {
	if o != nil && o.PropertyPlantEquipment.IsSet() {
		return true
	}

	return false
}

// SetPropertyPlantEquipment gets a reference to the given NullableString and assigns it to the PropertyPlantEquipment field.
func (o *FundamentalsFinancial) SetPropertyPlantEquipment(v string) {
	o.PropertyPlantEquipment.Set(&v)
}

// SetPropertyPlantEquipmentNil sets the value for PropertyPlantEquipment to be an explicit nil
func (o *FundamentalsFinancial) SetPropertyPlantEquipmentNil() {
	o.PropertyPlantEquipment.Set(nil)
}

// UnsetPropertyPlantEquipment ensures that no value is present for PropertyPlantEquipment, not even an explicit nil
func (o *FundamentalsFinancial) UnsetPropertyPlantEquipment() {
	o.PropertyPlantEquipment.Unset()
}

// GetTotalCurrentAssets returns the TotalCurrentAssets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetTotalCurrentAssets() string {
	if o == nil || o.TotalCurrentAssets.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalCurrentAssets.Get()
}

// GetTotalCurrentAssetsOk returns a tuple with the TotalCurrentAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetTotalCurrentAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalCurrentAssets.Get(), o.TotalCurrentAssets.IsSet()
}

// HasTotalCurrentAssets returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasTotalCurrentAssets() bool {
	if o != nil && o.TotalCurrentAssets.IsSet() {
		return true
	}

	return false
}

// SetTotalCurrentAssets gets a reference to the given NullableString and assigns it to the TotalCurrentAssets field.
func (o *FundamentalsFinancial) SetTotalCurrentAssets(v string) {
	o.TotalCurrentAssets.Set(&v)
}

// SetTotalCurrentAssetsNil sets the value for TotalCurrentAssets to be an explicit nil
func (o *FundamentalsFinancial) SetTotalCurrentAssetsNil() {
	o.TotalCurrentAssets.Set(nil)
}

// UnsetTotalCurrentAssets ensures that no value is present for TotalCurrentAssets, not even an explicit nil
func (o *FundamentalsFinancial) UnsetTotalCurrentAssets() {
	o.TotalCurrentAssets.Unset()
}

// GetLongTermInvestments returns the LongTermInvestments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetLongTermInvestments() string {
	if o == nil || o.LongTermInvestments.Get() == nil {
		var ret string
		return ret
	}
	return *o.LongTermInvestments.Get()
}

// GetLongTermInvestmentsOk returns a tuple with the LongTermInvestments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetLongTermInvestmentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LongTermInvestments.Get(), o.LongTermInvestments.IsSet()
}

// HasLongTermInvestments returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasLongTermInvestments() bool {
	if o != nil && o.LongTermInvestments.IsSet() {
		return true
	}

	return false
}

// SetLongTermInvestments gets a reference to the given NullableString and assigns it to the LongTermInvestments field.
func (o *FundamentalsFinancial) SetLongTermInvestments(v string) {
	o.LongTermInvestments.Set(&v)
}

// SetLongTermInvestmentsNil sets the value for LongTermInvestments to be an explicit nil
func (o *FundamentalsFinancial) SetLongTermInvestmentsNil() {
	o.LongTermInvestments.Set(nil)
}

// UnsetLongTermInvestments ensures that no value is present for LongTermInvestments, not even an explicit nil
func (o *FundamentalsFinancial) UnsetLongTermInvestments() {
	o.LongTermInvestments.Unset()
}

// GetNetTangibleAssets returns the NetTangibleAssets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNetTangibleAssets() string {
	if o == nil || o.NetTangibleAssets.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetTangibleAssets.Get()
}

// GetNetTangibleAssetsOk returns a tuple with the NetTangibleAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNetTangibleAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetTangibleAssets.Get(), o.NetTangibleAssets.IsSet()
}

// HasNetTangibleAssets returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNetTangibleAssets() bool {
	if o != nil && o.NetTangibleAssets.IsSet() {
		return true
	}

	return false
}

// SetNetTangibleAssets gets a reference to the given NullableString and assigns it to the NetTangibleAssets field.
func (o *FundamentalsFinancial) SetNetTangibleAssets(v string) {
	o.NetTangibleAssets.Set(&v)
}

// SetNetTangibleAssetsNil sets the value for NetTangibleAssets to be an explicit nil
func (o *FundamentalsFinancial) SetNetTangibleAssetsNil() {
	o.NetTangibleAssets.Set(nil)
}

// UnsetNetTangibleAssets ensures that no value is present for NetTangibleAssets, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNetTangibleAssets() {
	o.NetTangibleAssets.Unset()
}

// GetShortTermInvestments returns the ShortTermInvestments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetShortTermInvestments() string {
	if o == nil || o.ShortTermInvestments.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShortTermInvestments.Get()
}

// GetShortTermInvestmentsOk returns a tuple with the ShortTermInvestments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetShortTermInvestmentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortTermInvestments.Get(), o.ShortTermInvestments.IsSet()
}

// HasShortTermInvestments returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasShortTermInvestments() bool {
	if o != nil && o.ShortTermInvestments.IsSet() {
		return true
	}

	return false
}

// SetShortTermInvestments gets a reference to the given NullableString and assigns it to the ShortTermInvestments field.
func (o *FundamentalsFinancial) SetShortTermInvestments(v string) {
	o.ShortTermInvestments.Set(&v)
}

// SetShortTermInvestmentsNil sets the value for ShortTermInvestments to be an explicit nil
func (o *FundamentalsFinancial) SetShortTermInvestmentsNil() {
	o.ShortTermInvestments.Set(nil)
}

// UnsetShortTermInvestments ensures that no value is present for ShortTermInvestments, not even an explicit nil
func (o *FundamentalsFinancial) UnsetShortTermInvestments() {
	o.ShortTermInvestments.Unset()
}

// GetNetReceivables returns the NetReceivables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNetReceivables() string {
	if o == nil || o.NetReceivables.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetReceivables.Get()
}

// GetNetReceivablesOk returns a tuple with the NetReceivables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNetReceivablesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetReceivables.Get(), o.NetReceivables.IsSet()
}

// HasNetReceivables returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNetReceivables() bool {
	if o != nil && o.NetReceivables.IsSet() {
		return true
	}

	return false
}

// SetNetReceivables gets a reference to the given NullableString and assigns it to the NetReceivables field.
func (o *FundamentalsFinancial) SetNetReceivables(v string) {
	o.NetReceivables.Set(&v)
}

// SetNetReceivablesNil sets the value for NetReceivables to be an explicit nil
func (o *FundamentalsFinancial) SetNetReceivablesNil() {
	o.NetReceivables.Set(nil)
}

// UnsetNetReceivables ensures that no value is present for NetReceivables, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNetReceivables() {
	o.NetReceivables.Unset()
}

// GetLongTermDebt returns the LongTermDebt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetLongTermDebt() string {
	if o == nil || o.LongTermDebt.Get() == nil {
		var ret string
		return ret
	}
	return *o.LongTermDebt.Get()
}

// GetLongTermDebtOk returns a tuple with the LongTermDebt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetLongTermDebtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LongTermDebt.Get(), o.LongTermDebt.IsSet()
}

// HasLongTermDebt returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasLongTermDebt() bool {
	if o != nil && o.LongTermDebt.IsSet() {
		return true
	}

	return false
}

// SetLongTermDebt gets a reference to the given NullableString and assigns it to the LongTermDebt field.
func (o *FundamentalsFinancial) SetLongTermDebt(v string) {
	o.LongTermDebt.Set(&v)
}

// SetLongTermDebtNil sets the value for LongTermDebt to be an explicit nil
func (o *FundamentalsFinancial) SetLongTermDebtNil() {
	o.LongTermDebt.Set(nil)
}

// UnsetLongTermDebt ensures that no value is present for LongTermDebt, not even an explicit nil
func (o *FundamentalsFinancial) UnsetLongTermDebt() {
	o.LongTermDebt.Unset()
}

// GetInventory returns the Inventory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetInventory() string {
	if o == nil || o.Inventory.Get() == nil {
		var ret string
		return ret
	}
	return *o.Inventory.Get()
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetInventoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inventory.Get(), o.Inventory.IsSet()
}

// HasInventory returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasInventory() bool {
	if o != nil && o.Inventory.IsSet() {
		return true
	}

	return false
}

// SetInventory gets a reference to the given NullableString and assigns it to the Inventory field.
func (o *FundamentalsFinancial) SetInventory(v string) {
	o.Inventory.Set(&v)
}

// SetInventoryNil sets the value for Inventory to be an explicit nil
func (o *FundamentalsFinancial) SetInventoryNil() {
	o.Inventory.Set(nil)
}

// UnsetInventory ensures that no value is present for Inventory, not even an explicit nil
func (o *FundamentalsFinancial) UnsetInventory() {
	o.Inventory.Unset()
}

// GetAccountsPayable returns the AccountsPayable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetAccountsPayable() string {
	if o == nil || o.AccountsPayable.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountsPayable.Get()
}

// GetAccountsPayableOk returns a tuple with the AccountsPayable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetAccountsPayableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountsPayable.Get(), o.AccountsPayable.IsSet()
}

// HasAccountsPayable returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasAccountsPayable() bool {
	if o != nil && o.AccountsPayable.IsSet() {
		return true
	}

	return false
}

// SetAccountsPayable gets a reference to the given NullableString and assigns it to the AccountsPayable field.
func (o *FundamentalsFinancial) SetAccountsPayable(v string) {
	o.AccountsPayable.Set(&v)
}

// SetAccountsPayableNil sets the value for AccountsPayable to be an explicit nil
func (o *FundamentalsFinancial) SetAccountsPayableNil() {
	o.AccountsPayable.Set(nil)
}

// UnsetAccountsPayable ensures that no value is present for AccountsPayable, not even an explicit nil
func (o *FundamentalsFinancial) UnsetAccountsPayable() {
	o.AccountsPayable.Unset()
}

// GetTotalPermanentEquity returns the TotalPermanentEquity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetTotalPermanentEquity() string {
	if o == nil || o.TotalPermanentEquity.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalPermanentEquity.Get()
}

// GetTotalPermanentEquityOk returns a tuple with the TotalPermanentEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetTotalPermanentEquityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalPermanentEquity.Get(), o.TotalPermanentEquity.IsSet()
}

// HasTotalPermanentEquity returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasTotalPermanentEquity() bool {
	if o != nil && o.TotalPermanentEquity.IsSet() {
		return true
	}

	return false
}

// SetTotalPermanentEquity gets a reference to the given NullableString and assigns it to the TotalPermanentEquity field.
func (o *FundamentalsFinancial) SetTotalPermanentEquity(v string) {
	o.TotalPermanentEquity.Set(&v)
}

// SetTotalPermanentEquityNil sets the value for TotalPermanentEquity to be an explicit nil
func (o *FundamentalsFinancial) SetTotalPermanentEquityNil() {
	o.TotalPermanentEquity.Set(nil)
}

// UnsetTotalPermanentEquity ensures that no value is present for TotalPermanentEquity, not even an explicit nil
func (o *FundamentalsFinancial) UnsetTotalPermanentEquity() {
	o.TotalPermanentEquity.Unset()
}

// GetNoncontrollingInterestInConsolidatedEntity returns the NoncontrollingInterestInConsolidatedEntity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNoncontrollingInterestInConsolidatedEntity() string {
	if o == nil || o.NoncontrollingInterestInConsolidatedEntity.Get() == nil {
		var ret string
		return ret
	}
	return *o.NoncontrollingInterestInConsolidatedEntity.Get()
}

// GetNoncontrollingInterestInConsolidatedEntityOk returns a tuple with the NoncontrollingInterestInConsolidatedEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNoncontrollingInterestInConsolidatedEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoncontrollingInterestInConsolidatedEntity.Get(), o.NoncontrollingInterestInConsolidatedEntity.IsSet()
}

// HasNoncontrollingInterestInConsolidatedEntity returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNoncontrollingInterestInConsolidatedEntity() bool {
	if o != nil && o.NoncontrollingInterestInConsolidatedEntity.IsSet() {
		return true
	}

	return false
}

// SetNoncontrollingInterestInConsolidatedEntity gets a reference to the given NullableString and assigns it to the NoncontrollingInterestInConsolidatedEntity field.
func (o *FundamentalsFinancial) SetNoncontrollingInterestInConsolidatedEntity(v string) {
	o.NoncontrollingInterestInConsolidatedEntity.Set(&v)
}

// SetNoncontrollingInterestInConsolidatedEntityNil sets the value for NoncontrollingInterestInConsolidatedEntity to be an explicit nil
func (o *FundamentalsFinancial) SetNoncontrollingInterestInConsolidatedEntityNil() {
	o.NoncontrollingInterestInConsolidatedEntity.Set(nil)
}

// UnsetNoncontrollingInterestInConsolidatedEntity ensures that no value is present for NoncontrollingInterestInConsolidatedEntity, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNoncontrollingInterestInConsolidatedEntity() {
	o.NoncontrollingInterestInConsolidatedEntity.Unset()
}

// GetTemporaryEquityRedeemableNoncontrollingInterests returns the TemporaryEquityRedeemableNoncontrollingInterests field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetTemporaryEquityRedeemableNoncontrollingInterests() string {
	if o == nil || o.TemporaryEquityRedeemableNoncontrollingInterests.Get() == nil {
		var ret string
		return ret
	}
	return *o.TemporaryEquityRedeemableNoncontrollingInterests.Get()
}

// GetTemporaryEquityRedeemableNoncontrollingInterestsOk returns a tuple with the TemporaryEquityRedeemableNoncontrollingInterests field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetTemporaryEquityRedeemableNoncontrollingInterestsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemporaryEquityRedeemableNoncontrollingInterests.Get(), o.TemporaryEquityRedeemableNoncontrollingInterests.IsSet()
}

// HasTemporaryEquityRedeemableNoncontrollingInterests returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasTemporaryEquityRedeemableNoncontrollingInterests() bool {
	if o != nil && o.TemporaryEquityRedeemableNoncontrollingInterests.IsSet() {
		return true
	}

	return false
}

// SetTemporaryEquityRedeemableNoncontrollingInterests gets a reference to the given NullableString and assigns it to the TemporaryEquityRedeemableNoncontrollingInterests field.
func (o *FundamentalsFinancial) SetTemporaryEquityRedeemableNoncontrollingInterests(v string) {
	o.TemporaryEquityRedeemableNoncontrollingInterests.Set(&v)
}

// SetTemporaryEquityRedeemableNoncontrollingInterestsNil sets the value for TemporaryEquityRedeemableNoncontrollingInterests to be an explicit nil
func (o *FundamentalsFinancial) SetTemporaryEquityRedeemableNoncontrollingInterestsNil() {
	o.TemporaryEquityRedeemableNoncontrollingInterests.Set(nil)
}

// UnsetTemporaryEquityRedeemableNoncontrollingInterests ensures that no value is present for TemporaryEquityRedeemableNoncontrollingInterests, not even an explicit nil
func (o *FundamentalsFinancial) UnsetTemporaryEquityRedeemableNoncontrollingInterests() {
	o.TemporaryEquityRedeemableNoncontrollingInterests.Unset()
}

// GetAccumulatedOtherComprehensiveIncome returns the AccumulatedOtherComprehensiveIncome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetAccumulatedOtherComprehensiveIncome() string {
	if o == nil || o.AccumulatedOtherComprehensiveIncome.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccumulatedOtherComprehensiveIncome.Get()
}

// GetAccumulatedOtherComprehensiveIncomeOk returns a tuple with the AccumulatedOtherComprehensiveIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetAccumulatedOtherComprehensiveIncomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccumulatedOtherComprehensiveIncome.Get(), o.AccumulatedOtherComprehensiveIncome.IsSet()
}

// HasAccumulatedOtherComprehensiveIncome returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasAccumulatedOtherComprehensiveIncome() bool {
	if o != nil && o.AccumulatedOtherComprehensiveIncome.IsSet() {
		return true
	}

	return false
}

// SetAccumulatedOtherComprehensiveIncome gets a reference to the given NullableString and assigns it to the AccumulatedOtherComprehensiveIncome field.
func (o *FundamentalsFinancial) SetAccumulatedOtherComprehensiveIncome(v string) {
	o.AccumulatedOtherComprehensiveIncome.Set(&v)
}

// SetAccumulatedOtherComprehensiveIncomeNil sets the value for AccumulatedOtherComprehensiveIncome to be an explicit nil
func (o *FundamentalsFinancial) SetAccumulatedOtherComprehensiveIncomeNil() {
	o.AccumulatedOtherComprehensiveIncome.Set(nil)
}

// UnsetAccumulatedOtherComprehensiveIncome ensures that no value is present for AccumulatedOtherComprehensiveIncome, not even an explicit nil
func (o *FundamentalsFinancial) UnsetAccumulatedOtherComprehensiveIncome() {
	o.AccumulatedOtherComprehensiveIncome.Unset()
}

// GetAdditionalPaidInCapital returns the AdditionalPaidInCapital field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetAdditionalPaidInCapital() string {
	if o == nil || o.AdditionalPaidInCapital.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdditionalPaidInCapital.Get()
}

// GetAdditionalPaidInCapitalOk returns a tuple with the AdditionalPaidInCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetAdditionalPaidInCapitalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdditionalPaidInCapital.Get(), o.AdditionalPaidInCapital.IsSet()
}

// HasAdditionalPaidInCapital returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasAdditionalPaidInCapital() bool {
	if o != nil && o.AdditionalPaidInCapital.IsSet() {
		return true
	}

	return false
}

// SetAdditionalPaidInCapital gets a reference to the given NullableString and assigns it to the AdditionalPaidInCapital field.
func (o *FundamentalsFinancial) SetAdditionalPaidInCapital(v string) {
	o.AdditionalPaidInCapital.Set(&v)
}

// SetAdditionalPaidInCapitalNil sets the value for AdditionalPaidInCapital to be an explicit nil
func (o *FundamentalsFinancial) SetAdditionalPaidInCapitalNil() {
	o.AdditionalPaidInCapital.Set(nil)
}

// UnsetAdditionalPaidInCapital ensures that no value is present for AdditionalPaidInCapital, not even an explicit nil
func (o *FundamentalsFinancial) UnsetAdditionalPaidInCapital() {
	o.AdditionalPaidInCapital.Unset()
}

// GetCommonStockTotalEquity returns the CommonStockTotalEquity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetCommonStockTotalEquity() string {
	if o == nil || o.CommonStockTotalEquity.Get() == nil {
		var ret string
		return ret
	}
	return *o.CommonStockTotalEquity.Get()
}

// GetCommonStockTotalEquityOk returns a tuple with the CommonStockTotalEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetCommonStockTotalEquityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommonStockTotalEquity.Get(), o.CommonStockTotalEquity.IsSet()
}

// HasCommonStockTotalEquity returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasCommonStockTotalEquity() bool {
	if o != nil && o.CommonStockTotalEquity.IsSet() {
		return true
	}

	return false
}

// SetCommonStockTotalEquity gets a reference to the given NullableString and assigns it to the CommonStockTotalEquity field.
func (o *FundamentalsFinancial) SetCommonStockTotalEquity(v string) {
	o.CommonStockTotalEquity.Set(&v)
}

// SetCommonStockTotalEquityNil sets the value for CommonStockTotalEquity to be an explicit nil
func (o *FundamentalsFinancial) SetCommonStockTotalEquityNil() {
	o.CommonStockTotalEquity.Set(nil)
}

// UnsetCommonStockTotalEquity ensures that no value is present for CommonStockTotalEquity, not even an explicit nil
func (o *FundamentalsFinancial) UnsetCommonStockTotalEquity() {
	o.CommonStockTotalEquity.Unset()
}

// GetPreferredStockTotalEquity returns the PreferredStockTotalEquity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetPreferredStockTotalEquity() string {
	if o == nil || o.PreferredStockTotalEquity.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredStockTotalEquity.Get()
}

// GetPreferredStockTotalEquityOk returns a tuple with the PreferredStockTotalEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetPreferredStockTotalEquityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredStockTotalEquity.Get(), o.PreferredStockTotalEquity.IsSet()
}

// HasPreferredStockTotalEquity returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasPreferredStockTotalEquity() bool {
	if o != nil && o.PreferredStockTotalEquity.IsSet() {
		return true
	}

	return false
}

// SetPreferredStockTotalEquity gets a reference to the given NullableString and assigns it to the PreferredStockTotalEquity field.
func (o *FundamentalsFinancial) SetPreferredStockTotalEquity(v string) {
	o.PreferredStockTotalEquity.Set(&v)
}

// SetPreferredStockTotalEquityNil sets the value for PreferredStockTotalEquity to be an explicit nil
func (o *FundamentalsFinancial) SetPreferredStockTotalEquityNil() {
	o.PreferredStockTotalEquity.Set(nil)
}

// UnsetPreferredStockTotalEquity ensures that no value is present for PreferredStockTotalEquity, not even an explicit nil
func (o *FundamentalsFinancial) UnsetPreferredStockTotalEquity() {
	o.PreferredStockTotalEquity.Unset()
}

// GetRetainedEarningsTotalEquity returns the RetainedEarningsTotalEquity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetRetainedEarningsTotalEquity() string {
	if o == nil || o.RetainedEarningsTotalEquity.Get() == nil {
		var ret string
		return ret
	}
	return *o.RetainedEarningsTotalEquity.Get()
}

// GetRetainedEarningsTotalEquityOk returns a tuple with the RetainedEarningsTotalEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetRetainedEarningsTotalEquityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetainedEarningsTotalEquity.Get(), o.RetainedEarningsTotalEquity.IsSet()
}

// HasRetainedEarningsTotalEquity returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasRetainedEarningsTotalEquity() bool {
	if o != nil && o.RetainedEarningsTotalEquity.IsSet() {
		return true
	}

	return false
}

// SetRetainedEarningsTotalEquity gets a reference to the given NullableString and assigns it to the RetainedEarningsTotalEquity field.
func (o *FundamentalsFinancial) SetRetainedEarningsTotalEquity(v string) {
	o.RetainedEarningsTotalEquity.Set(&v)
}

// SetRetainedEarningsTotalEquityNil sets the value for RetainedEarningsTotalEquity to be an explicit nil
func (o *FundamentalsFinancial) SetRetainedEarningsTotalEquityNil() {
	o.RetainedEarningsTotalEquity.Set(nil)
}

// UnsetRetainedEarningsTotalEquity ensures that no value is present for RetainedEarningsTotalEquity, not even an explicit nil
func (o *FundamentalsFinancial) UnsetRetainedEarningsTotalEquity() {
	o.RetainedEarningsTotalEquity.Unset()
}

// GetTreasuryStock returns the TreasuryStock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetTreasuryStock() string {
	if o == nil || o.TreasuryStock.Get() == nil {
		var ret string
		return ret
	}
	return *o.TreasuryStock.Get()
}

// GetTreasuryStockOk returns a tuple with the TreasuryStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetTreasuryStockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TreasuryStock.Get(), o.TreasuryStock.IsSet()
}

// HasTreasuryStock returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasTreasuryStock() bool {
	if o != nil && o.TreasuryStock.IsSet() {
		return true
	}

	return false
}

// SetTreasuryStock gets a reference to the given NullableString and assigns it to the TreasuryStock field.
func (o *FundamentalsFinancial) SetTreasuryStock(v string) {
	o.TreasuryStock.Set(&v)
}

// SetTreasuryStockNil sets the value for TreasuryStock to be an explicit nil
func (o *FundamentalsFinancial) SetTreasuryStockNil() {
	o.TreasuryStock.Set(nil)
}

// UnsetTreasuryStock ensures that no value is present for TreasuryStock, not even an explicit nil
func (o *FundamentalsFinancial) UnsetTreasuryStock() {
	o.TreasuryStock.Unset()
}

// GetAccumulatedAmortization returns the AccumulatedAmortization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetAccumulatedAmortization() string {
	if o == nil || o.AccumulatedAmortization.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccumulatedAmortization.Get()
}

// GetAccumulatedAmortizationOk returns a tuple with the AccumulatedAmortization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetAccumulatedAmortizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccumulatedAmortization.Get(), o.AccumulatedAmortization.IsSet()
}

// HasAccumulatedAmortization returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasAccumulatedAmortization() bool {
	if o != nil && o.AccumulatedAmortization.IsSet() {
		return true
	}

	return false
}

// SetAccumulatedAmortization gets a reference to the given NullableString and assigns it to the AccumulatedAmortization field.
func (o *FundamentalsFinancial) SetAccumulatedAmortization(v string) {
	o.AccumulatedAmortization.Set(&v)
}

// SetAccumulatedAmortizationNil sets the value for AccumulatedAmortization to be an explicit nil
func (o *FundamentalsFinancial) SetAccumulatedAmortizationNil() {
	o.AccumulatedAmortization.Set(nil)
}

// UnsetAccumulatedAmortization ensures that no value is present for AccumulatedAmortization, not even an explicit nil
func (o *FundamentalsFinancial) UnsetAccumulatedAmortization() {
	o.AccumulatedAmortization.Unset()
}

// GetNonCurrrentAssetsOther returns the NonCurrrentAssetsOther field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNonCurrrentAssetsOther() string {
	if o == nil || o.NonCurrrentAssetsOther.Get() == nil {
		var ret string
		return ret
	}
	return *o.NonCurrrentAssetsOther.Get()
}

// GetNonCurrrentAssetsOtherOk returns a tuple with the NonCurrrentAssetsOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNonCurrrentAssetsOtherOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonCurrrentAssetsOther.Get(), o.NonCurrrentAssetsOther.IsSet()
}

// HasNonCurrrentAssetsOther returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNonCurrrentAssetsOther() bool {
	if o != nil && o.NonCurrrentAssetsOther.IsSet() {
		return true
	}

	return false
}

// SetNonCurrrentAssetsOther gets a reference to the given NullableString and assigns it to the NonCurrrentAssetsOther field.
func (o *FundamentalsFinancial) SetNonCurrrentAssetsOther(v string) {
	o.NonCurrrentAssetsOther.Set(&v)
}

// SetNonCurrrentAssetsOtherNil sets the value for NonCurrrentAssetsOther to be an explicit nil
func (o *FundamentalsFinancial) SetNonCurrrentAssetsOtherNil() {
	o.NonCurrrentAssetsOther.Set(nil)
}

// UnsetNonCurrrentAssetsOther ensures that no value is present for NonCurrrentAssetsOther, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNonCurrrentAssetsOther() {
	o.NonCurrrentAssetsOther.Unset()
}

// GetDeferredLongTermAssetCharges returns the DeferredLongTermAssetCharges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetDeferredLongTermAssetCharges() string {
	if o == nil || o.DeferredLongTermAssetCharges.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeferredLongTermAssetCharges.Get()
}

// GetDeferredLongTermAssetChargesOk returns a tuple with the DeferredLongTermAssetCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetDeferredLongTermAssetChargesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeferredLongTermAssetCharges.Get(), o.DeferredLongTermAssetCharges.IsSet()
}

// HasDeferredLongTermAssetCharges returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasDeferredLongTermAssetCharges() bool {
	if o != nil && o.DeferredLongTermAssetCharges.IsSet() {
		return true
	}

	return false
}

// SetDeferredLongTermAssetCharges gets a reference to the given NullableString and assigns it to the DeferredLongTermAssetCharges field.
func (o *FundamentalsFinancial) SetDeferredLongTermAssetCharges(v string) {
	o.DeferredLongTermAssetCharges.Set(&v)
}

// SetDeferredLongTermAssetChargesNil sets the value for DeferredLongTermAssetCharges to be an explicit nil
func (o *FundamentalsFinancial) SetDeferredLongTermAssetChargesNil() {
	o.DeferredLongTermAssetCharges.Set(nil)
}

// UnsetDeferredLongTermAssetCharges ensures that no value is present for DeferredLongTermAssetCharges, not even an explicit nil
func (o *FundamentalsFinancial) UnsetDeferredLongTermAssetCharges() {
	o.DeferredLongTermAssetCharges.Unset()
}

// GetNonCurrentAssetsTotal returns the NonCurrentAssetsTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNonCurrentAssetsTotal() string {
	if o == nil || o.NonCurrentAssetsTotal.Get() == nil {
		var ret string
		return ret
	}
	return *o.NonCurrentAssetsTotal.Get()
}

// GetNonCurrentAssetsTotalOk returns a tuple with the NonCurrentAssetsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNonCurrentAssetsTotalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonCurrentAssetsTotal.Get(), o.NonCurrentAssetsTotal.IsSet()
}

// HasNonCurrentAssetsTotal returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNonCurrentAssetsTotal() bool {
	if o != nil && o.NonCurrentAssetsTotal.IsSet() {
		return true
	}

	return false
}

// SetNonCurrentAssetsTotal gets a reference to the given NullableString and assigns it to the NonCurrentAssetsTotal field.
func (o *FundamentalsFinancial) SetNonCurrentAssetsTotal(v string) {
	o.NonCurrentAssetsTotal.Set(&v)
}

// SetNonCurrentAssetsTotalNil sets the value for NonCurrentAssetsTotal to be an explicit nil
func (o *FundamentalsFinancial) SetNonCurrentAssetsTotalNil() {
	o.NonCurrentAssetsTotal.Set(nil)
}

// UnsetNonCurrentAssetsTotal ensures that no value is present for NonCurrentAssetsTotal, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNonCurrentAssetsTotal() {
	o.NonCurrentAssetsTotal.Unset()
}

// GetCapitalLeaseObligations returns the CapitalLeaseObligations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetCapitalLeaseObligations() string {
	if o == nil || o.CapitalLeaseObligations.Get() == nil {
		var ret string
		return ret
	}
	return *o.CapitalLeaseObligations.Get()
}

// GetCapitalLeaseObligationsOk returns a tuple with the CapitalLeaseObligations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetCapitalLeaseObligationsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CapitalLeaseObligations.Get(), o.CapitalLeaseObligations.IsSet()
}

// HasCapitalLeaseObligations returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasCapitalLeaseObligations() bool {
	if o != nil && o.CapitalLeaseObligations.IsSet() {
		return true
	}

	return false
}

// SetCapitalLeaseObligations gets a reference to the given NullableString and assigns it to the CapitalLeaseObligations field.
func (o *FundamentalsFinancial) SetCapitalLeaseObligations(v string) {
	o.CapitalLeaseObligations.Set(&v)
}

// SetCapitalLeaseObligationsNil sets the value for CapitalLeaseObligations to be an explicit nil
func (o *FundamentalsFinancial) SetCapitalLeaseObligationsNil() {
	o.CapitalLeaseObligations.Set(nil)
}

// UnsetCapitalLeaseObligations ensures that no value is present for CapitalLeaseObligations, not even an explicit nil
func (o *FundamentalsFinancial) UnsetCapitalLeaseObligations() {
	o.CapitalLeaseObligations.Unset()
}

// GetLongTermDebtTotal returns the LongTermDebtTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetLongTermDebtTotal() string {
	if o == nil || o.LongTermDebtTotal.Get() == nil {
		var ret string
		return ret
	}
	return *o.LongTermDebtTotal.Get()
}

// GetLongTermDebtTotalOk returns a tuple with the LongTermDebtTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetLongTermDebtTotalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LongTermDebtTotal.Get(), o.LongTermDebtTotal.IsSet()
}

// HasLongTermDebtTotal returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasLongTermDebtTotal() bool {
	if o != nil && o.LongTermDebtTotal.IsSet() {
		return true
	}

	return false
}

// SetLongTermDebtTotal gets a reference to the given NullableString and assigns it to the LongTermDebtTotal field.
func (o *FundamentalsFinancial) SetLongTermDebtTotal(v string) {
	o.LongTermDebtTotal.Set(&v)
}

// SetLongTermDebtTotalNil sets the value for LongTermDebtTotal to be an explicit nil
func (o *FundamentalsFinancial) SetLongTermDebtTotalNil() {
	o.LongTermDebtTotal.Set(nil)
}

// UnsetLongTermDebtTotal ensures that no value is present for LongTermDebtTotal, not even an explicit nil
func (o *FundamentalsFinancial) UnsetLongTermDebtTotal() {
	o.LongTermDebtTotal.Unset()
}

// GetNonCurrentLiabilitiesOther returns the NonCurrentLiabilitiesOther field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNonCurrentLiabilitiesOther() string {
	if o == nil || o.NonCurrentLiabilitiesOther.Get() == nil {
		var ret string
		return ret
	}
	return *o.NonCurrentLiabilitiesOther.Get()
}

// GetNonCurrentLiabilitiesOtherOk returns a tuple with the NonCurrentLiabilitiesOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNonCurrentLiabilitiesOtherOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonCurrentLiabilitiesOther.Get(), o.NonCurrentLiabilitiesOther.IsSet()
}

// HasNonCurrentLiabilitiesOther returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNonCurrentLiabilitiesOther() bool {
	if o != nil && o.NonCurrentLiabilitiesOther.IsSet() {
		return true
	}

	return false
}

// SetNonCurrentLiabilitiesOther gets a reference to the given NullableString and assigns it to the NonCurrentLiabilitiesOther field.
func (o *FundamentalsFinancial) SetNonCurrentLiabilitiesOther(v string) {
	o.NonCurrentLiabilitiesOther.Set(&v)
}

// SetNonCurrentLiabilitiesOtherNil sets the value for NonCurrentLiabilitiesOther to be an explicit nil
func (o *FundamentalsFinancial) SetNonCurrentLiabilitiesOtherNil() {
	o.NonCurrentLiabilitiesOther.Set(nil)
}

// UnsetNonCurrentLiabilitiesOther ensures that no value is present for NonCurrentLiabilitiesOther, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNonCurrentLiabilitiesOther() {
	o.NonCurrentLiabilitiesOther.Unset()
}

// GetNonCurrentLiabilitiesTotal returns the NonCurrentLiabilitiesTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNonCurrentLiabilitiesTotal() string {
	if o == nil || o.NonCurrentLiabilitiesTotal.Get() == nil {
		var ret string
		return ret
	}
	return *o.NonCurrentLiabilitiesTotal.Get()
}

// GetNonCurrentLiabilitiesTotalOk returns a tuple with the NonCurrentLiabilitiesTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNonCurrentLiabilitiesTotalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonCurrentLiabilitiesTotal.Get(), o.NonCurrentLiabilitiesTotal.IsSet()
}

// HasNonCurrentLiabilitiesTotal returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNonCurrentLiabilitiesTotal() bool {
	if o != nil && o.NonCurrentLiabilitiesTotal.IsSet() {
		return true
	}

	return false
}

// SetNonCurrentLiabilitiesTotal gets a reference to the given NullableString and assigns it to the NonCurrentLiabilitiesTotal field.
func (o *FundamentalsFinancial) SetNonCurrentLiabilitiesTotal(v string) {
	o.NonCurrentLiabilitiesTotal.Set(&v)
}

// SetNonCurrentLiabilitiesTotalNil sets the value for NonCurrentLiabilitiesTotal to be an explicit nil
func (o *FundamentalsFinancial) SetNonCurrentLiabilitiesTotalNil() {
	o.NonCurrentLiabilitiesTotal.Set(nil)
}

// UnsetNonCurrentLiabilitiesTotal ensures that no value is present for NonCurrentLiabilitiesTotal, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNonCurrentLiabilitiesTotal() {
	o.NonCurrentLiabilitiesTotal.Unset()
}

// GetNegativeGoodwill returns the NegativeGoodwill field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNegativeGoodwill() string {
	if o == nil || o.NegativeGoodwill.Get() == nil {
		var ret string
		return ret
	}
	return *o.NegativeGoodwill.Get()
}

// GetNegativeGoodwillOk returns a tuple with the NegativeGoodwill field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNegativeGoodwillOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NegativeGoodwill.Get(), o.NegativeGoodwill.IsSet()
}

// HasNegativeGoodwill returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNegativeGoodwill() bool {
	if o != nil && o.NegativeGoodwill.IsSet() {
		return true
	}

	return false
}

// SetNegativeGoodwill gets a reference to the given NullableString and assigns it to the NegativeGoodwill field.
func (o *FundamentalsFinancial) SetNegativeGoodwill(v string) {
	o.NegativeGoodwill.Set(&v)
}

// SetNegativeGoodwillNil sets the value for NegativeGoodwill to be an explicit nil
func (o *FundamentalsFinancial) SetNegativeGoodwillNil() {
	o.NegativeGoodwill.Set(nil)
}

// UnsetNegativeGoodwill ensures that no value is present for NegativeGoodwill, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNegativeGoodwill() {
	o.NegativeGoodwill.Unset()
}

// GetWarrants returns the Warrants field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetWarrants() string {
	if o == nil || o.Warrants.Get() == nil {
		var ret string
		return ret
	}
	return *o.Warrants.Get()
}

// GetWarrantsOk returns a tuple with the Warrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetWarrantsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Warrants.Get(), o.Warrants.IsSet()
}

// HasWarrants returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasWarrants() bool {
	if o != nil && o.Warrants.IsSet() {
		return true
	}

	return false
}

// SetWarrants gets a reference to the given NullableString and assigns it to the Warrants field.
func (o *FundamentalsFinancial) SetWarrants(v string) {
	o.Warrants.Set(&v)
}

// SetWarrantsNil sets the value for Warrants to be an explicit nil
func (o *FundamentalsFinancial) SetWarrantsNil() {
	o.Warrants.Set(nil)
}

// UnsetWarrants ensures that no value is present for Warrants, not even an explicit nil
func (o *FundamentalsFinancial) UnsetWarrants() {
	o.Warrants.Unset()
}

// GetPreferredStockRedeemable returns the PreferredStockRedeemable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetPreferredStockRedeemable() string {
	if o == nil || o.PreferredStockRedeemable.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredStockRedeemable.Get()
}

// GetPreferredStockRedeemableOk returns a tuple with the PreferredStockRedeemable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetPreferredStockRedeemableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredStockRedeemable.Get(), o.PreferredStockRedeemable.IsSet()
}

// HasPreferredStockRedeemable returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasPreferredStockRedeemable() bool {
	if o != nil && o.PreferredStockRedeemable.IsSet() {
		return true
	}

	return false
}

// SetPreferredStockRedeemable gets a reference to the given NullableString and assigns it to the PreferredStockRedeemable field.
func (o *FundamentalsFinancial) SetPreferredStockRedeemable(v string) {
	o.PreferredStockRedeemable.Set(&v)
}

// SetPreferredStockRedeemableNil sets the value for PreferredStockRedeemable to be an explicit nil
func (o *FundamentalsFinancial) SetPreferredStockRedeemableNil() {
	o.PreferredStockRedeemable.Set(nil)
}

// UnsetPreferredStockRedeemable ensures that no value is present for PreferredStockRedeemable, not even an explicit nil
func (o *FundamentalsFinancial) UnsetPreferredStockRedeemable() {
	o.PreferredStockRedeemable.Unset()
}

// GetCapitalSurpluse returns the CapitalSurpluse field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetCapitalSurpluse() string {
	if o == nil || o.CapitalSurpluse.Get() == nil {
		var ret string
		return ret
	}
	return *o.CapitalSurpluse.Get()
}

// GetCapitalSurpluseOk returns a tuple with the CapitalSurpluse field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetCapitalSurpluseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CapitalSurpluse.Get(), o.CapitalSurpluse.IsSet()
}

// HasCapitalSurpluse returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasCapitalSurpluse() bool {
	if o != nil && o.CapitalSurpluse.IsSet() {
		return true
	}

	return false
}

// SetCapitalSurpluse gets a reference to the given NullableString and assigns it to the CapitalSurpluse field.
func (o *FundamentalsFinancial) SetCapitalSurpluse(v string) {
	o.CapitalSurpluse.Set(&v)
}

// SetCapitalSurpluseNil sets the value for CapitalSurpluse to be an explicit nil
func (o *FundamentalsFinancial) SetCapitalSurpluseNil() {
	o.CapitalSurpluse.Set(nil)
}

// UnsetCapitalSurpluse ensures that no value is present for CapitalSurpluse, not even an explicit nil
func (o *FundamentalsFinancial) UnsetCapitalSurpluse() {
	o.CapitalSurpluse.Unset()
}

// GetLiabilitiesAndStockholdersEquity returns the LiabilitiesAndStockholdersEquity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetLiabilitiesAndStockholdersEquity() string {
	if o == nil || o.LiabilitiesAndStockholdersEquity.Get() == nil {
		var ret string
		return ret
	}
	return *o.LiabilitiesAndStockholdersEquity.Get()
}

// GetLiabilitiesAndStockholdersEquityOk returns a tuple with the LiabilitiesAndStockholdersEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetLiabilitiesAndStockholdersEquityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiabilitiesAndStockholdersEquity.Get(), o.LiabilitiesAndStockholdersEquity.IsSet()
}

// HasLiabilitiesAndStockholdersEquity returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasLiabilitiesAndStockholdersEquity() bool {
	if o != nil && o.LiabilitiesAndStockholdersEquity.IsSet() {
		return true
	}

	return false
}

// SetLiabilitiesAndStockholdersEquity gets a reference to the given NullableString and assigns it to the LiabilitiesAndStockholdersEquity field.
func (o *FundamentalsFinancial) SetLiabilitiesAndStockholdersEquity(v string) {
	o.LiabilitiesAndStockholdersEquity.Set(&v)
}

// SetLiabilitiesAndStockholdersEquityNil sets the value for LiabilitiesAndStockholdersEquity to be an explicit nil
func (o *FundamentalsFinancial) SetLiabilitiesAndStockholdersEquityNil() {
	o.LiabilitiesAndStockholdersEquity.Set(nil)
}

// UnsetLiabilitiesAndStockholdersEquity ensures that no value is present for LiabilitiesAndStockholdersEquity, not even an explicit nil
func (o *FundamentalsFinancial) UnsetLiabilitiesAndStockholdersEquity() {
	o.LiabilitiesAndStockholdersEquity.Unset()
}

// GetCashAndShortTermInvestments returns the CashAndShortTermInvestments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetCashAndShortTermInvestments() string {
	if o == nil || o.CashAndShortTermInvestments.Get() == nil {
		var ret string
		return ret
	}
	return *o.CashAndShortTermInvestments.Get()
}

// GetCashAndShortTermInvestmentsOk returns a tuple with the CashAndShortTermInvestments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetCashAndShortTermInvestmentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CashAndShortTermInvestments.Get(), o.CashAndShortTermInvestments.IsSet()
}

// HasCashAndShortTermInvestments returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasCashAndShortTermInvestments() bool {
	if o != nil && o.CashAndShortTermInvestments.IsSet() {
		return true
	}

	return false
}

// SetCashAndShortTermInvestments gets a reference to the given NullableString and assigns it to the CashAndShortTermInvestments field.
func (o *FundamentalsFinancial) SetCashAndShortTermInvestments(v string) {
	o.CashAndShortTermInvestments.Set(&v)
}

// SetCashAndShortTermInvestmentsNil sets the value for CashAndShortTermInvestments to be an explicit nil
func (o *FundamentalsFinancial) SetCashAndShortTermInvestmentsNil() {
	o.CashAndShortTermInvestments.Set(nil)
}

// UnsetCashAndShortTermInvestments ensures that no value is present for CashAndShortTermInvestments, not even an explicit nil
func (o *FundamentalsFinancial) UnsetCashAndShortTermInvestments() {
	o.CashAndShortTermInvestments.Unset()
}

// GetPropertyPlantAndEquipmentGross returns the PropertyPlantAndEquipmentGross field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetPropertyPlantAndEquipmentGross() string {
	if o == nil || o.PropertyPlantAndEquipmentGross.Get() == nil {
		var ret string
		return ret
	}
	return *o.PropertyPlantAndEquipmentGross.Get()
}

// GetPropertyPlantAndEquipmentGrossOk returns a tuple with the PropertyPlantAndEquipmentGross field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetPropertyPlantAndEquipmentGrossOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertyPlantAndEquipmentGross.Get(), o.PropertyPlantAndEquipmentGross.IsSet()
}

// HasPropertyPlantAndEquipmentGross returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasPropertyPlantAndEquipmentGross() bool {
	if o != nil && o.PropertyPlantAndEquipmentGross.IsSet() {
		return true
	}

	return false
}

// SetPropertyPlantAndEquipmentGross gets a reference to the given NullableString and assigns it to the PropertyPlantAndEquipmentGross field.
func (o *FundamentalsFinancial) SetPropertyPlantAndEquipmentGross(v string) {
	o.PropertyPlantAndEquipmentGross.Set(&v)
}

// SetPropertyPlantAndEquipmentGrossNil sets the value for PropertyPlantAndEquipmentGross to be an explicit nil
func (o *FundamentalsFinancial) SetPropertyPlantAndEquipmentGrossNil() {
	o.PropertyPlantAndEquipmentGross.Set(nil)
}

// UnsetPropertyPlantAndEquipmentGross ensures that no value is present for PropertyPlantAndEquipmentGross, not even an explicit nil
func (o *FundamentalsFinancial) UnsetPropertyPlantAndEquipmentGross() {
	o.PropertyPlantAndEquipmentGross.Unset()
}

// GetAccumulatedDepreciation returns the AccumulatedDepreciation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetAccumulatedDepreciation() string {
	if o == nil || o.AccumulatedDepreciation.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccumulatedDepreciation.Get()
}

// GetAccumulatedDepreciationOk returns a tuple with the AccumulatedDepreciation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetAccumulatedDepreciationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccumulatedDepreciation.Get(), o.AccumulatedDepreciation.IsSet()
}

// HasAccumulatedDepreciation returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasAccumulatedDepreciation() bool {
	if o != nil && o.AccumulatedDepreciation.IsSet() {
		return true
	}

	return false
}

// SetAccumulatedDepreciation gets a reference to the given NullableString and assigns it to the AccumulatedDepreciation field.
func (o *FundamentalsFinancial) SetAccumulatedDepreciation(v string) {
	o.AccumulatedDepreciation.Set(&v)
}

// SetAccumulatedDepreciationNil sets the value for AccumulatedDepreciation to be an explicit nil
func (o *FundamentalsFinancial) SetAccumulatedDepreciationNil() {
	o.AccumulatedDepreciation.Set(nil)
}

// UnsetAccumulatedDepreciation ensures that no value is present for AccumulatedDepreciation, not even an explicit nil
func (o *FundamentalsFinancial) UnsetAccumulatedDepreciation() {
	o.AccumulatedDepreciation.Unset()
}

// GetNetWorkingCapital returns the NetWorkingCapital field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNetWorkingCapital() string {
	if o == nil || o.NetWorkingCapital.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetWorkingCapital.Get()
}

// GetNetWorkingCapitalOk returns a tuple with the NetWorkingCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNetWorkingCapitalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetWorkingCapital.Get(), o.NetWorkingCapital.IsSet()
}

// HasNetWorkingCapital returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNetWorkingCapital() bool {
	if o != nil && o.NetWorkingCapital.IsSet() {
		return true
	}

	return false
}

// SetNetWorkingCapital gets a reference to the given NullableString and assigns it to the NetWorkingCapital field.
func (o *FundamentalsFinancial) SetNetWorkingCapital(v string) {
	o.NetWorkingCapital.Set(&v)
}

// SetNetWorkingCapitalNil sets the value for NetWorkingCapital to be an explicit nil
func (o *FundamentalsFinancial) SetNetWorkingCapitalNil() {
	o.NetWorkingCapital.Set(nil)
}

// UnsetNetWorkingCapital ensures that no value is present for NetWorkingCapital, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNetWorkingCapital() {
	o.NetWorkingCapital.Unset()
}

// GetNetInvestedCapital returns the NetInvestedCapital field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetNetInvestedCapital() string {
	if o == nil || o.NetInvestedCapital.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetInvestedCapital.Get()
}

// GetNetInvestedCapitalOk returns a tuple with the NetInvestedCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetNetInvestedCapitalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetInvestedCapital.Get(), o.NetInvestedCapital.IsSet()
}

// HasNetInvestedCapital returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasNetInvestedCapital() bool {
	if o != nil && o.NetInvestedCapital.IsSet() {
		return true
	}

	return false
}

// SetNetInvestedCapital gets a reference to the given NullableString and assigns it to the NetInvestedCapital field.
func (o *FundamentalsFinancial) SetNetInvestedCapital(v string) {
	o.NetInvestedCapital.Set(&v)
}

// SetNetInvestedCapitalNil sets the value for NetInvestedCapital to be an explicit nil
func (o *FundamentalsFinancial) SetNetInvestedCapitalNil() {
	o.NetInvestedCapital.Set(nil)
}

// UnsetNetInvestedCapital ensures that no value is present for NetInvestedCapital, not even an explicit nil
func (o *FundamentalsFinancial) UnsetNetInvestedCapital() {
	o.NetInvestedCapital.Unset()
}

// GetCommonStockSharesOutstanding returns the CommonStockSharesOutstanding field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FundamentalsFinancial) GetCommonStockSharesOutstanding() string {
	if o == nil || o.CommonStockSharesOutstanding.Get() == nil {
		var ret string
		return ret
	}
	return *o.CommonStockSharesOutstanding.Get()
}

// GetCommonStockSharesOutstandingOk returns a tuple with the CommonStockSharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FundamentalsFinancial) GetCommonStockSharesOutstandingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommonStockSharesOutstanding.Get(), o.CommonStockSharesOutstanding.IsSet()
}

// HasCommonStockSharesOutstanding returns a boolean if a field has been set.
func (o *FundamentalsFinancial) HasCommonStockSharesOutstanding() bool {
	if o != nil && o.CommonStockSharesOutstanding.IsSet() {
		return true
	}

	return false
}

// SetCommonStockSharesOutstanding gets a reference to the given NullableString and assigns it to the CommonStockSharesOutstanding field.
func (o *FundamentalsFinancial) SetCommonStockSharesOutstanding(v string) {
	o.CommonStockSharesOutstanding.Set(&v)
}

// SetCommonStockSharesOutstandingNil sets the value for CommonStockSharesOutstanding to be an explicit nil
func (o *FundamentalsFinancial) SetCommonStockSharesOutstandingNil() {
	o.CommonStockSharesOutstanding.Set(nil)
}

// UnsetCommonStockSharesOutstanding ensures that no value is present for CommonStockSharesOutstanding, not even an explicit nil
func (o *FundamentalsFinancial) UnsetCommonStockSharesOutstanding() {
	o.CommonStockSharesOutstanding.Unset()
}

func (o FundamentalsFinancial) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.FilingDate != nil {
		toSerialize["filing_date"] = o.FilingDate
	}
	if o.CurrencySymbol.IsSet() {
		toSerialize["currency_symbol"] = o.CurrencySymbol.Get()
	}
	if o.TotalAssets.IsSet() {
		toSerialize["totalAssets"] = o.TotalAssets.Get()
	}
	if o.IntangibleAssets.IsSet() {
		toSerialize["intangibleAssets"] = o.IntangibleAssets.Get()
	}
	if o.EarningAssets.IsSet() {
		toSerialize["earningAssets"] = o.EarningAssets.Get()
	}
	if o.OtherCurrentAssets.IsSet() {
		toSerialize["otherCurrentAssets"] = o.OtherCurrentAssets.Get()
	}
	if o.TotalLiab.IsSet() {
		toSerialize["totalLiab"] = o.TotalLiab.Get()
	}
	if o.TotalStockholderEquity.IsSet() {
		toSerialize["totalStockholderEquity"] = o.TotalStockholderEquity.Get()
	}
	if o.DeferredLongTermLiab.IsSet() {
		toSerialize["deferredLongTermLiab"] = o.DeferredLongTermLiab.Get()
	}
	if o.OtherCurrentLiab.IsSet() {
		toSerialize["otherCurrentLiab"] = o.OtherCurrentLiab.Get()
	}
	if o.CommonStock.IsSet() {
		toSerialize["commonStock"] = o.CommonStock.Get()
	}
	if o.RetainedEarnings.IsSet() {
		toSerialize["retainedEarnings"] = o.RetainedEarnings.Get()
	}
	if o.OtherLiab.IsSet() {
		toSerialize["otherLiab"] = o.OtherLiab.Get()
	}
	if o.GoodWill.IsSet() {
		toSerialize["goodWill"] = o.GoodWill.Get()
	}
	if o.OtherAssets.IsSet() {
		toSerialize["otherAssets"] = o.OtherAssets.Get()
	}
	if o.Cash.IsSet() {
		toSerialize["cash"] = o.Cash.Get()
	}
	if o.TotalCurrentLiabilities.IsSet() {
		toSerialize["totalCurrentLiabilities"] = o.TotalCurrentLiabilities.Get()
	}
	if o.NetDebt.IsSet() {
		toSerialize["netDebt"] = o.NetDebt.Get()
	}
	if o.ShortTermDebt.IsSet() {
		toSerialize["shortTermDebt"] = o.ShortTermDebt.Get()
	}
	if o.ShortLongTermDebt.IsSet() {
		toSerialize["shortLongTermDebt"] = o.ShortLongTermDebt.Get()
	}
	if o.ShortLongTermDebtTotal.IsSet() {
		toSerialize["shortLongTermDebtTotal"] = o.ShortLongTermDebtTotal.Get()
	}
	if o.OtherStockholderEquity.IsSet() {
		toSerialize["otherStockholderEquity"] = o.OtherStockholderEquity.Get()
	}
	if o.PropertyPlantEquipment.IsSet() {
		toSerialize["propertyPlantEquipment"] = o.PropertyPlantEquipment.Get()
	}
	if o.TotalCurrentAssets.IsSet() {
		toSerialize["totalCurrentAssets"] = o.TotalCurrentAssets.Get()
	}
	if o.LongTermInvestments.IsSet() {
		toSerialize["longTermInvestments"] = o.LongTermInvestments.Get()
	}
	if o.NetTangibleAssets.IsSet() {
		toSerialize["netTangibleAssets"] = o.NetTangibleAssets.Get()
	}
	if o.ShortTermInvestments.IsSet() {
		toSerialize["shortTermInvestments"] = o.ShortTermInvestments.Get()
	}
	if o.NetReceivables.IsSet() {
		toSerialize["netReceivables"] = o.NetReceivables.Get()
	}
	if o.LongTermDebt.IsSet() {
		toSerialize["longTermDebt"] = o.LongTermDebt.Get()
	}
	if o.Inventory.IsSet() {
		toSerialize["inventory"] = o.Inventory.Get()
	}
	if o.AccountsPayable.IsSet() {
		toSerialize["accountsPayable"] = o.AccountsPayable.Get()
	}
	if o.TotalPermanentEquity.IsSet() {
		toSerialize["totalPermanentEquity"] = o.TotalPermanentEquity.Get()
	}
	if o.NoncontrollingInterestInConsolidatedEntity.IsSet() {
		toSerialize["noncontrollingInterestInConsolidatedEntity"] = o.NoncontrollingInterestInConsolidatedEntity.Get()
	}
	if o.TemporaryEquityRedeemableNoncontrollingInterests.IsSet() {
		toSerialize["temporaryEquityRedeemableNoncontrollingInterests"] = o.TemporaryEquityRedeemableNoncontrollingInterests.Get()
	}
	if o.AccumulatedOtherComprehensiveIncome.IsSet() {
		toSerialize["accumulatedOtherComprehensiveIncome"] = o.AccumulatedOtherComprehensiveIncome.Get()
	}
	if o.AdditionalPaidInCapital.IsSet() {
		toSerialize["additionalPaidInCapital"] = o.AdditionalPaidInCapital.Get()
	}
	if o.CommonStockTotalEquity.IsSet() {
		toSerialize["commonStockTotalEquity"] = o.CommonStockTotalEquity.Get()
	}
	if o.PreferredStockTotalEquity.IsSet() {
		toSerialize["preferredStockTotalEquity"] = o.PreferredStockTotalEquity.Get()
	}
	if o.RetainedEarningsTotalEquity.IsSet() {
		toSerialize["retainedEarningsTotalEquity"] = o.RetainedEarningsTotalEquity.Get()
	}
	if o.TreasuryStock.IsSet() {
		toSerialize["treasuryStock"] = o.TreasuryStock.Get()
	}
	if o.AccumulatedAmortization.IsSet() {
		toSerialize["accumulatedAmortization"] = o.AccumulatedAmortization.Get()
	}
	if o.NonCurrrentAssetsOther.IsSet() {
		toSerialize["nonCurrrentAssetsOther"] = o.NonCurrrentAssetsOther.Get()
	}
	if o.DeferredLongTermAssetCharges.IsSet() {
		toSerialize["deferredLongTermAssetCharges"] = o.DeferredLongTermAssetCharges.Get()
	}
	if o.NonCurrentAssetsTotal.IsSet() {
		toSerialize["nonCurrentAssetsTotal"] = o.NonCurrentAssetsTotal.Get()
	}
	if o.CapitalLeaseObligations.IsSet() {
		toSerialize["capitalLeaseObligations"] = o.CapitalLeaseObligations.Get()
	}
	if o.LongTermDebtTotal.IsSet() {
		toSerialize["longTermDebtTotal"] = o.LongTermDebtTotal.Get()
	}
	if o.NonCurrentLiabilitiesOther.IsSet() {
		toSerialize["nonCurrentLiabilitiesOther"] = o.NonCurrentLiabilitiesOther.Get()
	}
	if o.NonCurrentLiabilitiesTotal.IsSet() {
		toSerialize["nonCurrentLiabilitiesTotal"] = o.NonCurrentLiabilitiesTotal.Get()
	}
	if o.NegativeGoodwill.IsSet() {
		toSerialize["negativeGoodwill"] = o.NegativeGoodwill.Get()
	}
	if o.Warrants.IsSet() {
		toSerialize["warrants"] = o.Warrants.Get()
	}
	if o.PreferredStockRedeemable.IsSet() {
		toSerialize["preferredStockRedeemable"] = o.PreferredStockRedeemable.Get()
	}
	if o.CapitalSurpluse.IsSet() {
		toSerialize["capitalSurpluse"] = o.CapitalSurpluse.Get()
	}
	if o.LiabilitiesAndStockholdersEquity.IsSet() {
		toSerialize["liabilitiesAndStockholdersEquity"] = o.LiabilitiesAndStockholdersEquity.Get()
	}
	if o.CashAndShortTermInvestments.IsSet() {
		toSerialize["cashAndShortTermInvestments"] = o.CashAndShortTermInvestments.Get()
	}
	if o.PropertyPlantAndEquipmentGross.IsSet() {
		toSerialize["propertyPlantAndEquipmentGross"] = o.PropertyPlantAndEquipmentGross.Get()
	}
	if o.AccumulatedDepreciation.IsSet() {
		toSerialize["accumulatedDepreciation"] = o.AccumulatedDepreciation.Get()
	}
	if o.NetWorkingCapital.IsSet() {
		toSerialize["netWorkingCapital"] = o.NetWorkingCapital.Get()
	}
	if o.NetInvestedCapital.IsSet() {
		toSerialize["netInvestedCapital"] = o.NetInvestedCapital.Get()
	}
	if o.CommonStockSharesOutstanding.IsSet() {
		toSerialize["commonStockSharesOutstanding"] = o.CommonStockSharesOutstanding.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsFinancial struct {
	value *FundamentalsFinancial
	isSet bool
}

func (v NullableFundamentalsFinancial) Get() *FundamentalsFinancial {
	return v.value
}

func (v *NullableFundamentalsFinancial) Set(val *FundamentalsFinancial) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsFinancial) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsFinancial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsFinancial(val *FundamentalsFinancial) *NullableFundamentalsFinancial {
	return &NullableFundamentalsFinancial{value: val, isSet: true}
}

func (v NullableFundamentalsFinancial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsFinancial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
