/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsGeneralListings struct for FundamentalsGeneralListings
type FundamentalsGeneralListings struct {
	Code     *string `json:"Code,omitempty"`
	Exchange *string `json:"Exchange,omitempty"`
	Name     *string `json:"Name,omitempty"`
}

// NewFundamentalsGeneralListings instantiates a new FundamentalsGeneralListings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsGeneralListings() *FundamentalsGeneralListings {
	this := FundamentalsGeneralListings{}
	return &this
}

// NewFundamentalsGeneralListingsWithDefaults instantiates a new FundamentalsGeneralListings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsGeneralListingsWithDefaults() *FundamentalsGeneralListings {
	this := FundamentalsGeneralListings{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FundamentalsGeneralListings) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralListings) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FundamentalsGeneralListings) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FundamentalsGeneralListings) SetCode(v string) {
	o.Code = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *FundamentalsGeneralListings) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralListings) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *FundamentalsGeneralListings) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *FundamentalsGeneralListings) SetExchange(v string) {
	o.Exchange = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FundamentalsGeneralListings) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralListings) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FundamentalsGeneralListings) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FundamentalsGeneralListings) SetName(v string) {
	o.Name = &v
}

func (o FundamentalsGeneralListings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["Code"] = o.Code
	}
	if o.Exchange != nil {
		toSerialize["Exchange"] = o.Exchange
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsGeneralListings struct {
	value *FundamentalsGeneralListings
	isSet bool
}

func (v NullableFundamentalsGeneralListings) Get() *FundamentalsGeneralListings {
	return v.value
}

func (v *NullableFundamentalsGeneralListings) Set(val *FundamentalsGeneralListings) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsGeneralListings) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsGeneralListings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsGeneralListings(val *FundamentalsGeneralListings) *NullableFundamentalsGeneralListings {
	return &NullableFundamentalsGeneralListings{value: val, isSet: true}
}

func (v NullableFundamentalsGeneralListings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsGeneralListings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
