/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsSharesStats struct for FundamentalsSharesStats
type FundamentalsSharesStats struct {
	SharesOutstanding       *int64   `json:"SharesOutstanding,omitempty"`
	SharesFloat             *int64   `json:"SharesFloat,omitempty"`
	PercentInsiders         *float64 `json:"PercentInsiders,omitempty"`
	PercentInstitutions     *float64 `json:"PercentInstitutions,omitempty"`
	SharesShort             *int64   `json:"SharesShort,omitempty"`
	SharesShortPriorMonth   *int64   `json:"SharesShortPriorMonth,omitempty"`
	ShortRatio              *float64 `json:"ShortRatio,omitempty"`
	ShortPercentOutstanding *float64 `json:"ShortPercentOutstanding,omitempty"`
	ShortPercentFloat       *float64 `json:"ShortPercentFloat,omitempty"`
}

// NewFundamentalsSharesStats instantiates a new FundamentalsSharesStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsSharesStats() *FundamentalsSharesStats {
	this := FundamentalsSharesStats{}
	return &this
}

// NewFundamentalsSharesStatsWithDefaults instantiates a new FundamentalsSharesStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsSharesStatsWithDefaults() *FundamentalsSharesStats {
	this := FundamentalsSharesStats{}
	return &this
}

// GetSharesOutstanding returns the SharesOutstanding field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetSharesOutstanding() int64 {
	if o == nil || o.SharesOutstanding == nil {
		var ret int64
		return ret
	}
	return *o.SharesOutstanding
}

// GetSharesOutstandingOk returns a tuple with the SharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetSharesOutstandingOk() (*int64, bool) {
	if o == nil || o.SharesOutstanding == nil {
		return nil, false
	}
	return o.SharesOutstanding, true
}

// HasSharesOutstanding returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasSharesOutstanding() bool {
	if o != nil && o.SharesOutstanding != nil {
		return true
	}

	return false
}

// SetSharesOutstanding gets a reference to the given int64 and assigns it to the SharesOutstanding field.
func (o *FundamentalsSharesStats) SetSharesOutstanding(v int64) {
	o.SharesOutstanding = &v
}

// GetSharesFloat returns the SharesFloat field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetSharesFloat() int64 {
	if o == nil || o.SharesFloat == nil {
		var ret int64
		return ret
	}
	return *o.SharesFloat
}

// GetSharesFloatOk returns a tuple with the SharesFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetSharesFloatOk() (*int64, bool) {
	if o == nil || o.SharesFloat == nil {
		return nil, false
	}
	return o.SharesFloat, true
}

// HasSharesFloat returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasSharesFloat() bool {
	if o != nil && o.SharesFloat != nil {
		return true
	}

	return false
}

// SetSharesFloat gets a reference to the given int64 and assigns it to the SharesFloat field.
func (o *FundamentalsSharesStats) SetSharesFloat(v int64) {
	o.SharesFloat = &v
}

// GetPercentInsiders returns the PercentInsiders field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetPercentInsiders() float64 {
	if o == nil || o.PercentInsiders == nil {
		var ret float64
		return ret
	}
	return *o.PercentInsiders
}

// GetPercentInsidersOk returns a tuple with the PercentInsiders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetPercentInsidersOk() (*float64, bool) {
	if o == nil || o.PercentInsiders == nil {
		return nil, false
	}
	return o.PercentInsiders, true
}

// HasPercentInsiders returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasPercentInsiders() bool {
	if o != nil && o.PercentInsiders != nil {
		return true
	}

	return false
}

// SetPercentInsiders gets a reference to the given float64 and assigns it to the PercentInsiders field.
func (o *FundamentalsSharesStats) SetPercentInsiders(v float64) {
	o.PercentInsiders = &v
}

// GetPercentInstitutions returns the PercentInstitutions field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetPercentInstitutions() float64 {
	if o == nil || o.PercentInstitutions == nil {
		var ret float64
		return ret
	}
	return *o.PercentInstitutions
}

// GetPercentInstitutionsOk returns a tuple with the PercentInstitutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetPercentInstitutionsOk() (*float64, bool) {
	if o == nil || o.PercentInstitutions == nil {
		return nil, false
	}
	return o.PercentInstitutions, true
}

// HasPercentInstitutions returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasPercentInstitutions() bool {
	if o != nil && o.PercentInstitutions != nil {
		return true
	}

	return false
}

// SetPercentInstitutions gets a reference to the given float64 and assigns it to the PercentInstitutions field.
func (o *FundamentalsSharesStats) SetPercentInstitutions(v float64) {
	o.PercentInstitutions = &v
}

// GetSharesShort returns the SharesShort field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetSharesShort() int64 {
	if o == nil || o.SharesShort == nil {
		var ret int64
		return ret
	}
	return *o.SharesShort
}

// GetSharesShortOk returns a tuple with the SharesShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetSharesShortOk() (*int64, bool) {
	if o == nil || o.SharesShort == nil {
		return nil, false
	}
	return o.SharesShort, true
}

// HasSharesShort returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasSharesShort() bool {
	if o != nil && o.SharesShort != nil {
		return true
	}

	return false
}

// SetSharesShort gets a reference to the given int64 and assigns it to the SharesShort field.
func (o *FundamentalsSharesStats) SetSharesShort(v int64) {
	o.SharesShort = &v
}

// GetSharesShortPriorMonth returns the SharesShortPriorMonth field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetSharesShortPriorMonth() int64 {
	if o == nil || o.SharesShortPriorMonth == nil {
		var ret int64
		return ret
	}
	return *o.SharesShortPriorMonth
}

// GetSharesShortPriorMonthOk returns a tuple with the SharesShortPriorMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetSharesShortPriorMonthOk() (*int64, bool) {
	if o == nil || o.SharesShortPriorMonth == nil {
		return nil, false
	}
	return o.SharesShortPriorMonth, true
}

// HasSharesShortPriorMonth returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasSharesShortPriorMonth() bool {
	if o != nil && o.SharesShortPriorMonth != nil {
		return true
	}

	return false
}

// SetSharesShortPriorMonth gets a reference to the given int64 and assigns it to the SharesShortPriorMonth field.
func (o *FundamentalsSharesStats) SetSharesShortPriorMonth(v int64) {
	o.SharesShortPriorMonth = &v
}

// GetShortRatio returns the ShortRatio field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetShortRatio() float64 {
	if o == nil || o.ShortRatio == nil {
		var ret float64
		return ret
	}
	return *o.ShortRatio
}

// GetShortRatioOk returns a tuple with the ShortRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetShortRatioOk() (*float64, bool) {
	if o == nil || o.ShortRatio == nil {
		return nil, false
	}
	return o.ShortRatio, true
}

// HasShortRatio returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasShortRatio() bool {
	if o != nil && o.ShortRatio != nil {
		return true
	}

	return false
}

// SetShortRatio gets a reference to the given float64 and assigns it to the ShortRatio field.
func (o *FundamentalsSharesStats) SetShortRatio(v float64) {
	o.ShortRatio = &v
}

// GetShortPercentOutstanding returns the ShortPercentOutstanding field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetShortPercentOutstanding() float64 {
	if o == nil || o.ShortPercentOutstanding == nil {
		var ret float64
		return ret
	}
	return *o.ShortPercentOutstanding
}

// GetShortPercentOutstandingOk returns a tuple with the ShortPercentOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetShortPercentOutstandingOk() (*float64, bool) {
	if o == nil || o.ShortPercentOutstanding == nil {
		return nil, false
	}
	return o.ShortPercentOutstanding, true
}

// HasShortPercentOutstanding returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasShortPercentOutstanding() bool {
	if o != nil && o.ShortPercentOutstanding != nil {
		return true
	}

	return false
}

// SetShortPercentOutstanding gets a reference to the given float64 and assigns it to the ShortPercentOutstanding field.
func (o *FundamentalsSharesStats) SetShortPercentOutstanding(v float64) {
	o.ShortPercentOutstanding = &v
}

// GetShortPercentFloat returns the ShortPercentFloat field value if set, zero value otherwise.
func (o *FundamentalsSharesStats) GetShortPercentFloat() float64 {
	if o == nil || o.ShortPercentFloat == nil {
		var ret float64
		return ret
	}
	return *o.ShortPercentFloat
}

// GetShortPercentFloatOk returns a tuple with the ShortPercentFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSharesStats) GetShortPercentFloatOk() (*float64, bool) {
	if o == nil || o.ShortPercentFloat == nil {
		return nil, false
	}
	return o.ShortPercentFloat, true
}

// HasShortPercentFloat returns a boolean if a field has been set.
func (o *FundamentalsSharesStats) HasShortPercentFloat() bool {
	if o != nil && o.ShortPercentFloat != nil {
		return true
	}

	return false
}

// SetShortPercentFloat gets a reference to the given float64 and assigns it to the ShortPercentFloat field.
func (o *FundamentalsSharesStats) SetShortPercentFloat(v float64) {
	o.ShortPercentFloat = &v
}

func (o FundamentalsSharesStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SharesOutstanding != nil {
		toSerialize["SharesOutstanding"] = o.SharesOutstanding
	}
	if o.SharesFloat != nil {
		toSerialize["SharesFloat"] = o.SharesFloat
	}
	if o.PercentInsiders != nil {
		toSerialize["PercentInsiders"] = o.PercentInsiders
	}
	if o.PercentInstitutions != nil {
		toSerialize["PercentInstitutions"] = o.PercentInstitutions
	}
	if o.SharesShort != nil {
		toSerialize["SharesShort"] = o.SharesShort
	}
	if o.SharesShortPriorMonth != nil {
		toSerialize["SharesShortPriorMonth"] = o.SharesShortPriorMonth
	}
	if o.ShortRatio != nil {
		toSerialize["ShortRatio"] = o.ShortRatio
	}
	if o.ShortPercentOutstanding != nil {
		toSerialize["ShortPercentOutstanding"] = o.ShortPercentOutstanding
	}
	if o.ShortPercentFloat != nil {
		toSerialize["ShortPercentFloat"] = o.ShortPercentFloat
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsSharesStats struct {
	value *FundamentalsSharesStats
	isSet bool
}

func (v NullableFundamentalsSharesStats) Get() *FundamentalsSharesStats {
	return v.value
}

func (v *NullableFundamentalsSharesStats) Set(val *FundamentalsSharesStats) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsSharesStats) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsSharesStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsSharesStats(val *FundamentalsSharesStats) *NullableFundamentalsSharesStats {
	return &NullableFundamentalsSharesStats{value: val, isSet: true}
}

func (v NullableFundamentalsSharesStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsSharesStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
