/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Exchange struct for Exchange
type Exchange struct {
	Name         *string `json:"Name,omitempty"`
	Code         *string `json:"Code,omitempty"`
	OperatingMIC *string `json:"OperatingMIC,omitempty"`
	Country      *string `json:"Country,omitempty"`
	Currency     *string `json:"Currency,omitempty"`
}

// NewExchange instantiates a new Exchange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchange() *Exchange {
	this := Exchange{}
	return &this
}

// NewExchangeWithDefaults instantiates a new Exchange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeWithDefaults() *Exchange {
	this := Exchange{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Exchange) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Exchange) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Exchange) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Exchange) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Exchange) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Exchange) SetCode(v string) {
	o.Code = &v
}

// GetOperatingMIC returns the OperatingMIC field value if set, zero value otherwise.
func (o *Exchange) GetOperatingMIC() string {
	if o == nil || o.OperatingMIC == nil {
		var ret string
		return ret
	}
	return *o.OperatingMIC
}

// GetOperatingMICOk returns a tuple with the OperatingMIC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange) GetOperatingMICOk() (*string, bool) {
	if o == nil || o.OperatingMIC == nil {
		return nil, false
	}
	return o.OperatingMIC, true
}

// HasOperatingMIC returns a boolean if a field has been set.
func (o *Exchange) HasOperatingMIC() bool {
	if o != nil && o.OperatingMIC != nil {
		return true
	}

	return false
}

// SetOperatingMIC gets a reference to the given string and assigns it to the OperatingMIC field.
func (o *Exchange) SetOperatingMIC(v string) {
	o.OperatingMIC = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Exchange) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Exchange) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Exchange) SetCountry(v string) {
	o.Country = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Exchange) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Exchange) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Exchange) SetCurrency(v string) {
	o.Currency = &v
}

func (o Exchange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Code != nil {
		toSerialize["Code"] = o.Code
	}
	if o.OperatingMIC != nil {
		toSerialize["OperatingMIC"] = o.OperatingMIC
	}
	if o.Country != nil {
		toSerialize["Country"] = o.Country
	}
	if o.Currency != nil {
		toSerialize["Currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableExchange struct {
	value *Exchange
	isSet bool
}

func (v NullableExchange) Get() *Exchange {
	return v.value
}

func (v *NullableExchange) Set(val *Exchange) {
	v.value = val
	v.isSet = true
}

func (v NullableExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchange(val *Exchange) *NullableExchange {
	return &NullableExchange{value: val, isSet: true}
}

func (v NullableExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
