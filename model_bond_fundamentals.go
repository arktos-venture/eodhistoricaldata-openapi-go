/*
eodhistoricaldata

eodhistoricaldata API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BondFundamentals struct for BondFundamentals
type BondFundamentals struct {
	Isin                    *string                         `json:"Isin,omitempty"`
	Cusip                   *string                         `json:"Cusip,omitempty"`
	Name                    *string                         `json:"Name,omitempty"`
	WKN                     *string                         `json:"WKN,omitempty"`
	Sedol                   *string                         `json:"Sedol,omitempty"`
	FIGI                    *string                         `json:"FIGI,omitempty"`
	Currency                *string                         `json:"Currency,omitempty"`
	Coupon                  *string                         `json:"Coupon,omitempty"`
	Price                   *string                         `json:"Price,omitempty"`
	LastTradeDate           *string                         `json:"LastTradeDate,omitempty"`
	YieldToMaturity         *string                         `json:"YieldToMaturity,omitempty"`
	Callable                *string                         `json:"Callable,omitempty"`
	NextCallDate            *string                         `json:"NextCallDate,omitempty"`
	MinimumSettlementAmount *string                         `json:"MinimumSettlementAmount,omitempty"`
	ParIntegralMultiple     *string                         `json:"ParIntegralMultiple,omitempty"`
	Classification          *BondFundamentalsClassification `json:"Classification,omitempty"`
	Rating                  *BondFundamentalsRating         `json:"Rating,omitempty"`
	IssueData               *BondFundamentalsIssueData      `json:"IssueData,omitempty"`
}

// NewBondFundamentals instantiates a new BondFundamentals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondFundamentals() *BondFundamentals {
	this := BondFundamentals{}
	return &this
}

// NewBondFundamentalsWithDefaults instantiates a new BondFundamentals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondFundamentalsWithDefaults() *BondFundamentals {
	this := BondFundamentals{}
	return &this
}

// GetIsin returns the Isin field value if set, zero value otherwise.
func (o *BondFundamentals) GetIsin() string {
	if o == nil || o.Isin == nil {
		var ret string
		return ret
	}
	return *o.Isin
}

// GetIsinOk returns a tuple with the Isin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetIsinOk() (*string, bool) {
	if o == nil || o.Isin == nil {
		return nil, false
	}
	return o.Isin, true
}

// HasIsin returns a boolean if a field has been set.
func (o *BondFundamentals) HasIsin() bool {
	if o != nil && o.Isin != nil {
		return true
	}

	return false
}

// SetIsin gets a reference to the given string and assigns it to the Isin field.
func (o *BondFundamentals) SetIsin(v string) {
	o.Isin = &v
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *BondFundamentals) GetCusip() string {
	if o == nil || o.Cusip == nil {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetCusipOk() (*string, bool) {
	if o == nil || o.Cusip == nil {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *BondFundamentals) HasCusip() bool {
	if o != nil && o.Cusip != nil {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *BondFundamentals) SetCusip(v string) {
	o.Cusip = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BondFundamentals) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BondFundamentals) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BondFundamentals) SetName(v string) {
	o.Name = &v
}

// GetWKN returns the WKN field value if set, zero value otherwise.
func (o *BondFundamentals) GetWKN() string {
	if o == nil || o.WKN == nil {
		var ret string
		return ret
	}
	return *o.WKN
}

// GetWKNOk returns a tuple with the WKN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetWKNOk() (*string, bool) {
	if o == nil || o.WKN == nil {
		return nil, false
	}
	return o.WKN, true
}

// HasWKN returns a boolean if a field has been set.
func (o *BondFundamentals) HasWKN() bool {
	if o != nil && o.WKN != nil {
		return true
	}

	return false
}

// SetWKN gets a reference to the given string and assigns it to the WKN field.
func (o *BondFundamentals) SetWKN(v string) {
	o.WKN = &v
}

// GetSedol returns the Sedol field value if set, zero value otherwise.
func (o *BondFundamentals) GetSedol() string {
	if o == nil || o.Sedol == nil {
		var ret string
		return ret
	}
	return *o.Sedol
}

// GetSedolOk returns a tuple with the Sedol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetSedolOk() (*string, bool) {
	if o == nil || o.Sedol == nil {
		return nil, false
	}
	return o.Sedol, true
}

// HasSedol returns a boolean if a field has been set.
func (o *BondFundamentals) HasSedol() bool {
	if o != nil && o.Sedol != nil {
		return true
	}

	return false
}

// SetSedol gets a reference to the given string and assigns it to the Sedol field.
func (o *BondFundamentals) SetSedol(v string) {
	o.Sedol = &v
}

// GetFIGI returns the FIGI field value if set, zero value otherwise.
func (o *BondFundamentals) GetFIGI() string {
	if o == nil || o.FIGI == nil {
		var ret string
		return ret
	}
	return *o.FIGI
}

// GetFIGIOk returns a tuple with the FIGI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetFIGIOk() (*string, bool) {
	if o == nil || o.FIGI == nil {
		return nil, false
	}
	return o.FIGI, true
}

// HasFIGI returns a boolean if a field has been set.
func (o *BondFundamentals) HasFIGI() bool {
	if o != nil && o.FIGI != nil {
		return true
	}

	return false
}

// SetFIGI gets a reference to the given string and assigns it to the FIGI field.
func (o *BondFundamentals) SetFIGI(v string) {
	o.FIGI = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *BondFundamentals) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *BondFundamentals) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *BondFundamentals) SetCurrency(v string) {
	o.Currency = &v
}

// GetCoupon returns the Coupon field value if set, zero value otherwise.
func (o *BondFundamentals) GetCoupon() string {
	if o == nil || o.Coupon == nil {
		var ret string
		return ret
	}
	return *o.Coupon
}

// GetCouponOk returns a tuple with the Coupon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetCouponOk() (*string, bool) {
	if o == nil || o.Coupon == nil {
		return nil, false
	}
	return o.Coupon, true
}

// HasCoupon returns a boolean if a field has been set.
func (o *BondFundamentals) HasCoupon() bool {
	if o != nil && o.Coupon != nil {
		return true
	}

	return false
}

// SetCoupon gets a reference to the given string and assigns it to the Coupon field.
func (o *BondFundamentals) SetCoupon(v string) {
	o.Coupon = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *BondFundamentals) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *BondFundamentals) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *BondFundamentals) SetPrice(v string) {
	o.Price = &v
}

// GetLastTradeDate returns the LastTradeDate field value if set, zero value otherwise.
func (o *BondFundamentals) GetLastTradeDate() string {
	if o == nil || o.LastTradeDate == nil {
		var ret string
		return ret
	}
	return *o.LastTradeDate
}

// GetLastTradeDateOk returns a tuple with the LastTradeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetLastTradeDateOk() (*string, bool) {
	if o == nil || o.LastTradeDate == nil {
		return nil, false
	}
	return o.LastTradeDate, true
}

// HasLastTradeDate returns a boolean if a field has been set.
func (o *BondFundamentals) HasLastTradeDate() bool {
	if o != nil && o.LastTradeDate != nil {
		return true
	}

	return false
}

// SetLastTradeDate gets a reference to the given string and assigns it to the LastTradeDate field.
func (o *BondFundamentals) SetLastTradeDate(v string) {
	o.LastTradeDate = &v
}

// GetYieldToMaturity returns the YieldToMaturity field value if set, zero value otherwise.
func (o *BondFundamentals) GetYieldToMaturity() string {
	if o == nil || o.YieldToMaturity == nil {
		var ret string
		return ret
	}
	return *o.YieldToMaturity
}

// GetYieldToMaturityOk returns a tuple with the YieldToMaturity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetYieldToMaturityOk() (*string, bool) {
	if o == nil || o.YieldToMaturity == nil {
		return nil, false
	}
	return o.YieldToMaturity, true
}

// HasYieldToMaturity returns a boolean if a field has been set.
func (o *BondFundamentals) HasYieldToMaturity() bool {
	if o != nil && o.YieldToMaturity != nil {
		return true
	}

	return false
}

// SetYieldToMaturity gets a reference to the given string and assigns it to the YieldToMaturity field.
func (o *BondFundamentals) SetYieldToMaturity(v string) {
	o.YieldToMaturity = &v
}

// GetCallable returns the Callable field value if set, zero value otherwise.
func (o *BondFundamentals) GetCallable() string {
	if o == nil || o.Callable == nil {
		var ret string
		return ret
	}
	return *o.Callable
}

// GetCallableOk returns a tuple with the Callable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetCallableOk() (*string, bool) {
	if o == nil || o.Callable == nil {
		return nil, false
	}
	return o.Callable, true
}

// HasCallable returns a boolean if a field has been set.
func (o *BondFundamentals) HasCallable() bool {
	if o != nil && o.Callable != nil {
		return true
	}

	return false
}

// SetCallable gets a reference to the given string and assigns it to the Callable field.
func (o *BondFundamentals) SetCallable(v string) {
	o.Callable = &v
}

// GetNextCallDate returns the NextCallDate field value if set, zero value otherwise.
func (o *BondFundamentals) GetNextCallDate() string {
	if o == nil || o.NextCallDate == nil {
		var ret string
		return ret
	}
	return *o.NextCallDate
}

// GetNextCallDateOk returns a tuple with the NextCallDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetNextCallDateOk() (*string, bool) {
	if o == nil || o.NextCallDate == nil {
		return nil, false
	}
	return o.NextCallDate, true
}

// HasNextCallDate returns a boolean if a field has been set.
func (o *BondFundamentals) HasNextCallDate() bool {
	if o != nil && o.NextCallDate != nil {
		return true
	}

	return false
}

// SetNextCallDate gets a reference to the given string and assigns it to the NextCallDate field.
func (o *BondFundamentals) SetNextCallDate(v string) {
	o.NextCallDate = &v
}

// GetMinimumSettlementAmount returns the MinimumSettlementAmount field value if set, zero value otherwise.
func (o *BondFundamentals) GetMinimumSettlementAmount() string {
	if o == nil || o.MinimumSettlementAmount == nil {
		var ret string
		return ret
	}
	return *o.MinimumSettlementAmount
}

// GetMinimumSettlementAmountOk returns a tuple with the MinimumSettlementAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetMinimumSettlementAmountOk() (*string, bool) {
	if o == nil || o.MinimumSettlementAmount == nil {
		return nil, false
	}
	return o.MinimumSettlementAmount, true
}

// HasMinimumSettlementAmount returns a boolean if a field has been set.
func (o *BondFundamentals) HasMinimumSettlementAmount() bool {
	if o != nil && o.MinimumSettlementAmount != nil {
		return true
	}

	return false
}

// SetMinimumSettlementAmount gets a reference to the given string and assigns it to the MinimumSettlementAmount field.
func (o *BondFundamentals) SetMinimumSettlementAmount(v string) {
	o.MinimumSettlementAmount = &v
}

// GetParIntegralMultiple returns the ParIntegralMultiple field value if set, zero value otherwise.
func (o *BondFundamentals) GetParIntegralMultiple() string {
	if o == nil || o.ParIntegralMultiple == nil {
		var ret string
		return ret
	}
	return *o.ParIntegralMultiple
}

// GetParIntegralMultipleOk returns a tuple with the ParIntegralMultiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetParIntegralMultipleOk() (*string, bool) {
	if o == nil || o.ParIntegralMultiple == nil {
		return nil, false
	}
	return o.ParIntegralMultiple, true
}

// HasParIntegralMultiple returns a boolean if a field has been set.
func (o *BondFundamentals) HasParIntegralMultiple() bool {
	if o != nil && o.ParIntegralMultiple != nil {
		return true
	}

	return false
}

// SetParIntegralMultiple gets a reference to the given string and assigns it to the ParIntegralMultiple field.
func (o *BondFundamentals) SetParIntegralMultiple(v string) {
	o.ParIntegralMultiple = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *BondFundamentals) GetClassification() BondFundamentalsClassification {
	if o == nil || o.Classification == nil {
		var ret BondFundamentalsClassification
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetClassificationOk() (*BondFundamentalsClassification, bool) {
	if o == nil || o.Classification == nil {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *BondFundamentals) HasClassification() bool {
	if o != nil && o.Classification != nil {
		return true
	}

	return false
}

// SetClassification gets a reference to the given BondFundamentalsClassification and assigns it to the Classification field.
func (o *BondFundamentals) SetClassification(v BondFundamentalsClassification) {
	o.Classification = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *BondFundamentals) GetRating() BondFundamentalsRating {
	if o == nil || o.Rating == nil {
		var ret BondFundamentalsRating
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetRatingOk() (*BondFundamentalsRating, bool) {
	if o == nil || o.Rating == nil {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *BondFundamentals) HasRating() bool {
	if o != nil && o.Rating != nil {
		return true
	}

	return false
}

// SetRating gets a reference to the given BondFundamentalsRating and assigns it to the Rating field.
func (o *BondFundamentals) SetRating(v BondFundamentalsRating) {
	o.Rating = &v
}

// GetIssueData returns the IssueData field value if set, zero value otherwise.
func (o *BondFundamentals) GetIssueData() BondFundamentalsIssueData {
	if o == nil || o.IssueData == nil {
		var ret BondFundamentalsIssueData
		return ret
	}
	return *o.IssueData
}

// GetIssueDataOk returns a tuple with the IssueData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondFundamentals) GetIssueDataOk() (*BondFundamentalsIssueData, bool) {
	if o == nil || o.IssueData == nil {
		return nil, false
	}
	return o.IssueData, true
}

// HasIssueData returns a boolean if a field has been set.
func (o *BondFundamentals) HasIssueData() bool {
	if o != nil && o.IssueData != nil {
		return true
	}

	return false
}

// SetIssueData gets a reference to the given BondFundamentalsIssueData and assigns it to the IssueData field.
func (o *BondFundamentals) SetIssueData(v BondFundamentalsIssueData) {
	o.IssueData = &v
}

func (o BondFundamentals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Isin != nil {
		toSerialize["Isin"] = o.Isin
	}
	if o.Cusip != nil {
		toSerialize["Cusip"] = o.Cusip
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.WKN != nil {
		toSerialize["WKN"] = o.WKN
	}
	if o.Sedol != nil {
		toSerialize["Sedol"] = o.Sedol
	}
	if o.FIGI != nil {
		toSerialize["FIGI"] = o.FIGI
	}
	if o.Currency != nil {
		toSerialize["Currency"] = o.Currency
	}
	if o.Coupon != nil {
		toSerialize["Coupon"] = o.Coupon
	}
	if o.Price != nil {
		toSerialize["Price"] = o.Price
	}
	if o.LastTradeDate != nil {
		toSerialize["LastTradeDate"] = o.LastTradeDate
	}
	if o.YieldToMaturity != nil {
		toSerialize["YieldToMaturity"] = o.YieldToMaturity
	}
	if o.Callable != nil {
		toSerialize["Callable"] = o.Callable
	}
	if o.NextCallDate != nil {
		toSerialize["NextCallDate"] = o.NextCallDate
	}
	if o.MinimumSettlementAmount != nil {
		toSerialize["MinimumSettlementAmount"] = o.MinimumSettlementAmount
	}
	if o.ParIntegralMultiple != nil {
		toSerialize["ParIntegralMultiple"] = o.ParIntegralMultiple
	}
	if o.Classification != nil {
		toSerialize["Classification"] = o.Classification
	}
	if o.Rating != nil {
		toSerialize["Rating"] = o.Rating
	}
	if o.IssueData != nil {
		toSerialize["IssueData"] = o.IssueData
	}
	return json.Marshal(toSerialize)
}

type NullableBondFundamentals struct {
	value *BondFundamentals
	isSet bool
}

func (v NullableBondFundamentals) Get() *BondFundamentals {
	return v.value
}

func (v *NullableBondFundamentals) Set(val *BondFundamentals) {
	v.value = val
	v.isSet = true
}

func (v NullableBondFundamentals) IsSet() bool {
	return v.isSet
}

func (v *NullableBondFundamentals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondFundamentals(val *BondFundamentals) *NullableBondFundamentals {
	return &NullableBondFundamentals{value: val, isSet: true}
}

func (v NullableBondFundamentals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondFundamentals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
