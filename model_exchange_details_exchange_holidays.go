/*
eodhistoricaldata

eodhistoricaldata API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExchangeDetailsExchangeHolidays struct for ExchangeDetailsExchangeHolidays
type ExchangeDetailsExchangeHolidays struct {
	Holiday *string `json:"Holiday,omitempty"`
	Date    *string `json:"Date,omitempty"`
	Type    *string `json:"Type,omitempty"`
}

// NewExchangeDetailsExchangeHolidays instantiates a new ExchangeDetailsExchangeHolidays object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeDetailsExchangeHolidays() *ExchangeDetailsExchangeHolidays {
	this := ExchangeDetailsExchangeHolidays{}
	return &this
}

// NewExchangeDetailsExchangeHolidaysWithDefaults instantiates a new ExchangeDetailsExchangeHolidays object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeDetailsExchangeHolidaysWithDefaults() *ExchangeDetailsExchangeHolidays {
	this := ExchangeDetailsExchangeHolidays{}
	return &this
}

// GetHoliday returns the Holiday field value if set, zero value otherwise.
func (o *ExchangeDetailsExchangeHolidays) GetHoliday() string {
	if o == nil || o.Holiday == nil {
		var ret string
		return ret
	}
	return *o.Holiday
}

// GetHolidayOk returns a tuple with the Holiday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeDetailsExchangeHolidays) GetHolidayOk() (*string, bool) {
	if o == nil || o.Holiday == nil {
		return nil, false
	}
	return o.Holiday, true
}

// HasHoliday returns a boolean if a field has been set.
func (o *ExchangeDetailsExchangeHolidays) HasHoliday() bool {
	if o != nil && o.Holiday != nil {
		return true
	}

	return false
}

// SetHoliday gets a reference to the given string and assigns it to the Holiday field.
func (o *ExchangeDetailsExchangeHolidays) SetHoliday(v string) {
	o.Holiday = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ExchangeDetailsExchangeHolidays) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeDetailsExchangeHolidays) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ExchangeDetailsExchangeHolidays) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ExchangeDetailsExchangeHolidays) SetDate(v string) {
	o.Date = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExchangeDetailsExchangeHolidays) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeDetailsExchangeHolidays) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExchangeDetailsExchangeHolidays) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExchangeDetailsExchangeHolidays) SetType(v string) {
	o.Type = &v
}

func (o ExchangeDetailsExchangeHolidays) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Holiday != nil {
		toSerialize["Holiday"] = o.Holiday
	}
	if o.Date != nil {
		toSerialize["Date"] = o.Date
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeDetailsExchangeHolidays struct {
	value *ExchangeDetailsExchangeHolidays
	isSet bool
}

func (v NullableExchangeDetailsExchangeHolidays) Get() *ExchangeDetailsExchangeHolidays {
	return v.value
}

func (v *NullableExchangeDetailsExchangeHolidays) Set(val *ExchangeDetailsExchangeHolidays) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeDetailsExchangeHolidays) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeDetailsExchangeHolidays) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeDetailsExchangeHolidays(val *ExchangeDetailsExchangeHolidays) *NullableExchangeDetailsExchangeHolidays {
	return &NullableExchangeDetailsExchangeHolidays{value: val, isSet: true}
}

func (v NullableExchangeDetailsExchangeHolidays) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeDetailsExchangeHolidays) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
