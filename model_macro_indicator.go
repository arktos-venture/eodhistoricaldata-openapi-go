/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MacroIndicator struct for MacroIndicator
type MacroIndicator struct {
	CountryCode *string  `json:"CountryCode,omitempty"`
	CountryName *string  `json:"CountryName,omitempty"`
	Indicator   *string  `json:"Indicator,omitempty"`
	Date        *string  `json:"Date,omitempty"`
	Period      *string  `json:"Period,omitempty"`
	Value       *float64 `json:"Value,omitempty"`
}

// NewMacroIndicator instantiates a new MacroIndicator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMacroIndicator() *MacroIndicator {
	this := MacroIndicator{}
	return &this
}

// NewMacroIndicatorWithDefaults instantiates a new MacroIndicator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMacroIndicatorWithDefaults() *MacroIndicator {
	this := MacroIndicator{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *MacroIndicator) GetCountryCode() string {
	if o == nil || o.CountryCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacroIndicator) GetCountryCodeOk() (*string, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *MacroIndicator) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *MacroIndicator) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *MacroIndicator) GetCountryName() string {
	if o == nil || o.CountryName == nil {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacroIndicator) GetCountryNameOk() (*string, bool) {
	if o == nil || o.CountryName == nil {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *MacroIndicator) HasCountryName() bool {
	if o != nil && o.CountryName != nil {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *MacroIndicator) SetCountryName(v string) {
	o.CountryName = &v
}

// GetIndicator returns the Indicator field value if set, zero value otherwise.
func (o *MacroIndicator) GetIndicator() string {
	if o == nil || o.Indicator == nil {
		var ret string
		return ret
	}
	return *o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacroIndicator) GetIndicatorOk() (*string, bool) {
	if o == nil || o.Indicator == nil {
		return nil, false
	}
	return o.Indicator, true
}

// HasIndicator returns a boolean if a field has been set.
func (o *MacroIndicator) HasIndicator() bool {
	if o != nil && o.Indicator != nil {
		return true
	}

	return false
}

// SetIndicator gets a reference to the given string and assigns it to the Indicator field.
func (o *MacroIndicator) SetIndicator(v string) {
	o.Indicator = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *MacroIndicator) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacroIndicator) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *MacroIndicator) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *MacroIndicator) SetDate(v string) {
	o.Date = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *MacroIndicator) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacroIndicator) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *MacroIndicator) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *MacroIndicator) SetPeriod(v string) {
	o.Period = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MacroIndicator) GetValue() float64 {
	if o == nil || o.Value == nil {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacroIndicator) GetValueOk() (*float64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MacroIndicator) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *MacroIndicator) SetValue(v float64) {
	o.Value = &v
}

func (o MacroIndicator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryCode != nil {
		toSerialize["CountryCode"] = o.CountryCode
	}
	if o.CountryName != nil {
		toSerialize["CountryName"] = o.CountryName
	}
	if o.Indicator != nil {
		toSerialize["Indicator"] = o.Indicator
	}
	if o.Date != nil {
		toSerialize["Date"] = o.Date
	}
	if o.Period != nil {
		toSerialize["Period"] = o.Period
	}
	if o.Value != nil {
		toSerialize["Value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableMacroIndicator struct {
	value *MacroIndicator
	isSet bool
}

func (v NullableMacroIndicator) Get() *MacroIndicator {
	return v.value
}

func (v *NullableMacroIndicator) Set(val *MacroIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableMacroIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableMacroIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMacroIndicator(val *MacroIndicator) *NullableMacroIndicator {
	return &NullableMacroIndicator{value: val, isSet: true}
}

func (v NullableMacroIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMacroIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
