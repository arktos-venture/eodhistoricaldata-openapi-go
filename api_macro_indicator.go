/*
eodhistoricaldata

eodhistoricaldata API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MacroIndicatorApiService MacroIndicatorApi service
type MacroIndicatorApiService service

type ApiListMacroIndicatorRequest struct {
	ctx        _context.Context
	ApiService *MacroIndicatorApiService
	country    string
	fmt        *string
	indicator  *string
}

// string fmt (name or id) of the macroindicator
func (r ApiListMacroIndicatorRequest) Fmt(fmt string) ApiListMacroIndicatorRequest {
	r.fmt = &fmt
	return r
}

// string indicator (name or id) of the macroindicator
func (r ApiListMacroIndicatorRequest) Indicator(indicator string) ApiListMacroIndicatorRequest {
	r.indicator = &indicator
	return r
}

func (r ApiListMacroIndicatorRequest) Execute() (MacroIndicator, *_nethttp.Response, error) {
	return r.ApiService.ListMacroIndicatorExecute(r)
}

/*
ListMacroIndicator Method for ListMacroIndicator

List properties of macroindicator

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param country string country (name or id) of the macroindicator
 @return ApiListMacroIndicatorRequest
*/
func (a *MacroIndicatorApiService) ListMacroIndicator(ctx _context.Context, country string) ApiListMacroIndicatorRequest {
	return ApiListMacroIndicatorRequest{
		ApiService: a,
		ctx:        ctx,
		country:    country,
	}
}

// Execute executes the request
//  @return MacroIndicator
func (a *MacroIndicatorApiService) ListMacroIndicatorExecute(r ApiListMacroIndicatorRequest) (MacroIndicator, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MacroIndicator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MacroIndicatorApiService.ListMacroIndicator")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/macro-indicator/{country}"
	localVarPath = strings.Replace(localVarPath, "{"+"country"+"}", _neturl.PathEscape(parameterToString(r.country, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.fmt == nil {
		return localVarReturnValue, nil, reportError("fmt is required and must be specified")
	}
	if r.indicator == nil {
		return localVarReturnValue, nil, reportError("indicator is required and must be specified")
	}

	localVarQueryParams.Add("fmt", parameterToString(*r.fmt, ""))
	localVarQueryParams.Add("indicator", parameterToString(*r.indicator, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
