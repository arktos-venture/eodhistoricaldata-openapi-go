/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsGeneralOfficers struct for FundamentalsGeneralOfficers
type FundamentalsGeneralOfficers struct {
	Name     *string `json:"Name,omitempty"`
	Title    *string `json:"Title,omitempty"`
	YearBorn *string `json:"YearBorn,omitempty"`
}

// NewFundamentalsGeneralOfficers instantiates a new FundamentalsGeneralOfficers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsGeneralOfficers() *FundamentalsGeneralOfficers {
	this := FundamentalsGeneralOfficers{}
	return &this
}

// NewFundamentalsGeneralOfficersWithDefaults instantiates a new FundamentalsGeneralOfficers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsGeneralOfficersWithDefaults() *FundamentalsGeneralOfficers {
	this := FundamentalsGeneralOfficers{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FundamentalsGeneralOfficers) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralOfficers) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FundamentalsGeneralOfficers) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FundamentalsGeneralOfficers) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FundamentalsGeneralOfficers) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralOfficers) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FundamentalsGeneralOfficers) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FundamentalsGeneralOfficers) SetTitle(v string) {
	o.Title = &v
}

// GetYearBorn returns the YearBorn field value if set, zero value otherwise.
func (o *FundamentalsGeneralOfficers) GetYearBorn() string {
	if o == nil || o.YearBorn == nil {
		var ret string
		return ret
	}
	return *o.YearBorn
}

// GetYearBornOk returns a tuple with the YearBorn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralOfficers) GetYearBornOk() (*string, bool) {
	if o == nil || o.YearBorn == nil {
		return nil, false
	}
	return o.YearBorn, true
}

// HasYearBorn returns a boolean if a field has been set.
func (o *FundamentalsGeneralOfficers) HasYearBorn() bool {
	if o != nil && o.YearBorn != nil {
		return true
	}

	return false
}

// SetYearBorn gets a reference to the given string and assigns it to the YearBorn field.
func (o *FundamentalsGeneralOfficers) SetYearBorn(v string) {
	o.YearBorn = &v
}

func (o FundamentalsGeneralOfficers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Title != nil {
		toSerialize["Title"] = o.Title
	}
	if o.YearBorn != nil {
		toSerialize["YearBorn"] = o.YearBorn
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsGeneralOfficers struct {
	value *FundamentalsGeneralOfficers
	isSet bool
}

func (v NullableFundamentalsGeneralOfficers) Get() *FundamentalsGeneralOfficers {
	return v.value
}

func (v *NullableFundamentalsGeneralOfficers) Set(val *FundamentalsGeneralOfficers) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsGeneralOfficers) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsGeneralOfficers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsGeneralOfficers(val *FundamentalsGeneralOfficers) *NullableFundamentalsGeneralOfficers {
	return &NullableFundamentalsGeneralOfficers{value: val, isSet: true}
}

func (v NullableFundamentalsGeneralOfficers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsGeneralOfficers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
