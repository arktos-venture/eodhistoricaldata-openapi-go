/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SplitsQuote struct for SplitsQuote
type SplitsQuote struct {
	Date  *string `json:"date,omitempty"`
	Split *string `json:"split,omitempty"`
}

// NewSplitsQuote instantiates a new SplitsQuote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitsQuote() *SplitsQuote {
	this := SplitsQuote{}
	return &this
}

// NewSplitsQuoteWithDefaults instantiates a new SplitsQuote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitsQuoteWithDefaults() *SplitsQuote {
	this := SplitsQuote{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *SplitsQuote) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitsQuote) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *SplitsQuote) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *SplitsQuote) SetDate(v string) {
	o.Date = &v
}

// GetSplit returns the Split field value if set, zero value otherwise.
func (o *SplitsQuote) GetSplit() string {
	if o == nil || o.Split == nil {
		var ret string
		return ret
	}
	return *o.Split
}

// GetSplitOk returns a tuple with the Split field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitsQuote) GetSplitOk() (*string, bool) {
	if o == nil || o.Split == nil {
		return nil, false
	}
	return o.Split, true
}

// HasSplit returns a boolean if a field has been set.
func (o *SplitsQuote) HasSplit() bool {
	if o != nil && o.Split != nil {
		return true
	}

	return false
}

// SetSplit gets a reference to the given string and assigns it to the Split field.
func (o *SplitsQuote) SetSplit(v string) {
	o.Split = &v
}

func (o SplitsQuote) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Split != nil {
		toSerialize["split"] = o.Split
	}
	return json.Marshal(toSerialize)
}

type NullableSplitsQuote struct {
	value *SplitsQuote
	isSet bool
}

func (v NullableSplitsQuote) Get() *SplitsQuote {
	return v.value
}

func (v *NullableSplitsQuote) Set(val *SplitsQuote) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitsQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitsQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitsQuote(val *SplitsQuote) *NullableSplitsQuote {
	return &NullableSplitsQuote{value: val, isSet: true}
}

func (v NullableSplitsQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitsQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
