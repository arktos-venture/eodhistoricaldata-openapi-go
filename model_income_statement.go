/*
eodhistoricaldata

eodhistoricaldata API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IncomeStatement struct for IncomeStatement
type IncomeStatement struct {
	Date                              *string        `json:"date,omitempty"`
	FilingDate                        *string        `json:"filing_date,omitempty"`
	CurrencySymbol                    *string        `json:"currency_symbol,omitempty"`
	ResearchDevelopment               NullableString `json:"researchDevelopment,omitempty"`
	EffectOfAccountingCharges         NullableString `json:"effectOfAccountingCharges,omitempty"`
	IncomeBeforeTax                   NullableString `json:"incomeBeforeTax,omitempty"`
	MinorityInterest                  NullableString `json:"minorityInterest,omitempty"`
	NetIncome                         NullableString `json:"netIncome,omitempty"`
	SellingGeneralAdministrative      NullableString `json:"sellingGeneralAdministrative,omitempty"`
	SellingAndMarketingExpenses       NullableString `json:"sellingAndMarketingExpenses,omitempty"`
	GrossProfit                       NullableString `json:"grossProfit,omitempty"`
	ReconciledDepreciation            NullableString `json:"reconciledDepreciation,omitempty"`
	Ebit                              NullableString `json:"ebit,omitempty"`
	Ebitda                            NullableString `json:"ebitda,omitempty"`
	DepreciationAndAmortization       NullableString `json:"depreciationAndAmortization,omitempty"`
	NonOperatingIncomeNetOther        NullableString `json:"nonOperatingIncomeNetOther,omitempty"`
	OperatingIncome                   NullableString `json:"operatingIncome,omitempty"`
	OtherOperatingExpenses            NullableString `json:"otherOperatingExpenses,omitempty"`
	InterestExpense                   NullableString `json:"interestExpense,omitempty"`
	TaxProvision                      NullableString `json:"taxProvision,omitempty"`
	InterestIncome                    NullableString `json:"interestIncome,omitempty"`
	NetInterestIncome                 NullableString `json:"netInterestIncome,omitempty"`
	ExtraordinaryItems                NullableString `json:"extraordinaryItems,omitempty"`
	NonRecurring                      NullableString `json:"nonRecurring,omitempty"`
	OtherItems                        NullableString `json:"otherItems,omitempty"`
	IncomeTaxExpense                  NullableString `json:"incomeTaxExpense,omitempty"`
	TotalRevenue                      NullableString `json:"totalRevenue,omitempty"`
	TotalOperatingExpenses            NullableString `json:"totalOperatingExpenses,omitempty"`
	CostOfRevenue                     NullableString `json:"costOfRevenue,omitempty"`
	TotalOtherIncomeExpenseNet        NullableString `json:"totalOtherIncomeExpenseNet,omitempty"`
	DiscontinuedOperations            NullableString `json:"discontinuedOperations,omitempty"`
	NetIncomeFromContinuingOps        NullableString `json:"netIncomeFromContinuingOps,omitempty"`
	NetIncomeApplicableToCommonShares NullableString `json:"netIncomeApplicableToCommonShares,omitempty"`
	PreferredStockAndOtherAdjustments NullableString `json:"preferredStockAndOtherAdjustments,omitempty"`
}

// NewIncomeStatement instantiates a new IncomeStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomeStatement() *IncomeStatement {
	this := IncomeStatement{}
	return &this
}

// NewIncomeStatementWithDefaults instantiates a new IncomeStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomeStatementWithDefaults() *IncomeStatement {
	this := IncomeStatement{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *IncomeStatement) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *IncomeStatement) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *IncomeStatement) SetDate(v string) {
	o.Date = &v
}

// GetFilingDate returns the FilingDate field value if set, zero value otherwise.
func (o *IncomeStatement) GetFilingDate() string {
	if o == nil || o.FilingDate == nil {
		var ret string
		return ret
	}
	return *o.FilingDate
}

// GetFilingDateOk returns a tuple with the FilingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetFilingDateOk() (*string, bool) {
	if o == nil || o.FilingDate == nil {
		return nil, false
	}
	return o.FilingDate, true
}

// HasFilingDate returns a boolean if a field has been set.
func (o *IncomeStatement) HasFilingDate() bool {
	if o != nil && o.FilingDate != nil {
		return true
	}

	return false
}

// SetFilingDate gets a reference to the given string and assigns it to the FilingDate field.
func (o *IncomeStatement) SetFilingDate(v string) {
	o.FilingDate = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *IncomeStatement) GetCurrencySymbol() string {
	if o == nil || o.CurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || o.CurrencySymbol == nil {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *IncomeStatement) HasCurrencySymbol() bool {
	if o != nil && o.CurrencySymbol != nil {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *IncomeStatement) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetResearchDevelopment returns the ResearchDevelopment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetResearchDevelopment() string {
	if o == nil || o.ResearchDevelopment.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResearchDevelopment.Get()
}

// GetResearchDevelopmentOk returns a tuple with the ResearchDevelopment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetResearchDevelopmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResearchDevelopment.Get(), o.ResearchDevelopment.IsSet()
}

// HasResearchDevelopment returns a boolean if a field has been set.
func (o *IncomeStatement) HasResearchDevelopment() bool {
	if o != nil && o.ResearchDevelopment.IsSet() {
		return true
	}

	return false
}

// SetResearchDevelopment gets a reference to the given NullableString and assigns it to the ResearchDevelopment field.
func (o *IncomeStatement) SetResearchDevelopment(v string) {
	o.ResearchDevelopment.Set(&v)
}

// SetResearchDevelopmentNil sets the value for ResearchDevelopment to be an explicit nil
func (o *IncomeStatement) SetResearchDevelopmentNil() {
	o.ResearchDevelopment.Set(nil)
}

// UnsetResearchDevelopment ensures that no value is present for ResearchDevelopment, not even an explicit nil
func (o *IncomeStatement) UnsetResearchDevelopment() {
	o.ResearchDevelopment.Unset()
}

// GetEffectOfAccountingCharges returns the EffectOfAccountingCharges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetEffectOfAccountingCharges() string {
	if o == nil || o.EffectOfAccountingCharges.Get() == nil {
		var ret string
		return ret
	}
	return *o.EffectOfAccountingCharges.Get()
}

// GetEffectOfAccountingChargesOk returns a tuple with the EffectOfAccountingCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetEffectOfAccountingChargesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffectOfAccountingCharges.Get(), o.EffectOfAccountingCharges.IsSet()
}

// HasEffectOfAccountingCharges returns a boolean if a field has been set.
func (o *IncomeStatement) HasEffectOfAccountingCharges() bool {
	if o != nil && o.EffectOfAccountingCharges.IsSet() {
		return true
	}

	return false
}

// SetEffectOfAccountingCharges gets a reference to the given NullableString and assigns it to the EffectOfAccountingCharges field.
func (o *IncomeStatement) SetEffectOfAccountingCharges(v string) {
	o.EffectOfAccountingCharges.Set(&v)
}

// SetEffectOfAccountingChargesNil sets the value for EffectOfAccountingCharges to be an explicit nil
func (o *IncomeStatement) SetEffectOfAccountingChargesNil() {
	o.EffectOfAccountingCharges.Set(nil)
}

// UnsetEffectOfAccountingCharges ensures that no value is present for EffectOfAccountingCharges, not even an explicit nil
func (o *IncomeStatement) UnsetEffectOfAccountingCharges() {
	o.EffectOfAccountingCharges.Unset()
}

// GetIncomeBeforeTax returns the IncomeBeforeTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetIncomeBeforeTax() string {
	if o == nil || o.IncomeBeforeTax.Get() == nil {
		var ret string
		return ret
	}
	return *o.IncomeBeforeTax.Get()
}

// GetIncomeBeforeTaxOk returns a tuple with the IncomeBeforeTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetIncomeBeforeTaxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncomeBeforeTax.Get(), o.IncomeBeforeTax.IsSet()
}

// HasIncomeBeforeTax returns a boolean if a field has been set.
func (o *IncomeStatement) HasIncomeBeforeTax() bool {
	if o != nil && o.IncomeBeforeTax.IsSet() {
		return true
	}

	return false
}

// SetIncomeBeforeTax gets a reference to the given NullableString and assigns it to the IncomeBeforeTax field.
func (o *IncomeStatement) SetIncomeBeforeTax(v string) {
	o.IncomeBeforeTax.Set(&v)
}

// SetIncomeBeforeTaxNil sets the value for IncomeBeforeTax to be an explicit nil
func (o *IncomeStatement) SetIncomeBeforeTaxNil() {
	o.IncomeBeforeTax.Set(nil)
}

// UnsetIncomeBeforeTax ensures that no value is present for IncomeBeforeTax, not even an explicit nil
func (o *IncomeStatement) UnsetIncomeBeforeTax() {
	o.IncomeBeforeTax.Unset()
}

// GetMinorityInterest returns the MinorityInterest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetMinorityInterest() string {
	if o == nil || o.MinorityInterest.Get() == nil {
		var ret string
		return ret
	}
	return *o.MinorityInterest.Get()
}

// GetMinorityInterestOk returns a tuple with the MinorityInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetMinorityInterestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinorityInterest.Get(), o.MinorityInterest.IsSet()
}

// HasMinorityInterest returns a boolean if a field has been set.
func (o *IncomeStatement) HasMinorityInterest() bool {
	if o != nil && o.MinorityInterest.IsSet() {
		return true
	}

	return false
}

// SetMinorityInterest gets a reference to the given NullableString and assigns it to the MinorityInterest field.
func (o *IncomeStatement) SetMinorityInterest(v string) {
	o.MinorityInterest.Set(&v)
}

// SetMinorityInterestNil sets the value for MinorityInterest to be an explicit nil
func (o *IncomeStatement) SetMinorityInterestNil() {
	o.MinorityInterest.Set(nil)
}

// UnsetMinorityInterest ensures that no value is present for MinorityInterest, not even an explicit nil
func (o *IncomeStatement) UnsetMinorityInterest() {
	o.MinorityInterest.Unset()
}

// GetNetIncome returns the NetIncome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetNetIncome() string {
	if o == nil || o.NetIncome.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetIncome.Get()
}

// GetNetIncomeOk returns a tuple with the NetIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNetIncomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetIncome.Get(), o.NetIncome.IsSet()
}

// HasNetIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasNetIncome() bool {
	if o != nil && o.NetIncome.IsSet() {
		return true
	}

	return false
}

// SetNetIncome gets a reference to the given NullableString and assigns it to the NetIncome field.
func (o *IncomeStatement) SetNetIncome(v string) {
	o.NetIncome.Set(&v)
}

// SetNetIncomeNil sets the value for NetIncome to be an explicit nil
func (o *IncomeStatement) SetNetIncomeNil() {
	o.NetIncome.Set(nil)
}

// UnsetNetIncome ensures that no value is present for NetIncome, not even an explicit nil
func (o *IncomeStatement) UnsetNetIncome() {
	o.NetIncome.Unset()
}

// GetSellingGeneralAdministrative returns the SellingGeneralAdministrative field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetSellingGeneralAdministrative() string {
	if o == nil || o.SellingGeneralAdministrative.Get() == nil {
		var ret string
		return ret
	}
	return *o.SellingGeneralAdministrative.Get()
}

// GetSellingGeneralAdministrativeOk returns a tuple with the SellingGeneralAdministrative field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetSellingGeneralAdministrativeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellingGeneralAdministrative.Get(), o.SellingGeneralAdministrative.IsSet()
}

// HasSellingGeneralAdministrative returns a boolean if a field has been set.
func (o *IncomeStatement) HasSellingGeneralAdministrative() bool {
	if o != nil && o.SellingGeneralAdministrative.IsSet() {
		return true
	}

	return false
}

// SetSellingGeneralAdministrative gets a reference to the given NullableString and assigns it to the SellingGeneralAdministrative field.
func (o *IncomeStatement) SetSellingGeneralAdministrative(v string) {
	o.SellingGeneralAdministrative.Set(&v)
}

// SetSellingGeneralAdministrativeNil sets the value for SellingGeneralAdministrative to be an explicit nil
func (o *IncomeStatement) SetSellingGeneralAdministrativeNil() {
	o.SellingGeneralAdministrative.Set(nil)
}

// UnsetSellingGeneralAdministrative ensures that no value is present for SellingGeneralAdministrative, not even an explicit nil
func (o *IncomeStatement) UnsetSellingGeneralAdministrative() {
	o.SellingGeneralAdministrative.Unset()
}

// GetSellingAndMarketingExpenses returns the SellingAndMarketingExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetSellingAndMarketingExpenses() string {
	if o == nil || o.SellingAndMarketingExpenses.Get() == nil {
		var ret string
		return ret
	}
	return *o.SellingAndMarketingExpenses.Get()
}

// GetSellingAndMarketingExpensesOk returns a tuple with the SellingAndMarketingExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetSellingAndMarketingExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellingAndMarketingExpenses.Get(), o.SellingAndMarketingExpenses.IsSet()
}

// HasSellingAndMarketingExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasSellingAndMarketingExpenses() bool {
	if o != nil && o.SellingAndMarketingExpenses.IsSet() {
		return true
	}

	return false
}

// SetSellingAndMarketingExpenses gets a reference to the given NullableString and assigns it to the SellingAndMarketingExpenses field.
func (o *IncomeStatement) SetSellingAndMarketingExpenses(v string) {
	o.SellingAndMarketingExpenses.Set(&v)
}

// SetSellingAndMarketingExpensesNil sets the value for SellingAndMarketingExpenses to be an explicit nil
func (o *IncomeStatement) SetSellingAndMarketingExpensesNil() {
	o.SellingAndMarketingExpenses.Set(nil)
}

// UnsetSellingAndMarketingExpenses ensures that no value is present for SellingAndMarketingExpenses, not even an explicit nil
func (o *IncomeStatement) UnsetSellingAndMarketingExpenses() {
	o.SellingAndMarketingExpenses.Unset()
}

// GetGrossProfit returns the GrossProfit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetGrossProfit() string {
	if o == nil || o.GrossProfit.Get() == nil {
		var ret string
		return ret
	}
	return *o.GrossProfit.Get()
}

// GetGrossProfitOk returns a tuple with the GrossProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetGrossProfitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GrossProfit.Get(), o.GrossProfit.IsSet()
}

// HasGrossProfit returns a boolean if a field has been set.
func (o *IncomeStatement) HasGrossProfit() bool {
	if o != nil && o.GrossProfit.IsSet() {
		return true
	}

	return false
}

// SetGrossProfit gets a reference to the given NullableString and assigns it to the GrossProfit field.
func (o *IncomeStatement) SetGrossProfit(v string) {
	o.GrossProfit.Set(&v)
}

// SetGrossProfitNil sets the value for GrossProfit to be an explicit nil
func (o *IncomeStatement) SetGrossProfitNil() {
	o.GrossProfit.Set(nil)
}

// UnsetGrossProfit ensures that no value is present for GrossProfit, not even an explicit nil
func (o *IncomeStatement) UnsetGrossProfit() {
	o.GrossProfit.Unset()
}

// GetReconciledDepreciation returns the ReconciledDepreciation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetReconciledDepreciation() string {
	if o == nil || o.ReconciledDepreciation.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReconciledDepreciation.Get()
}

// GetReconciledDepreciationOk returns a tuple with the ReconciledDepreciation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetReconciledDepreciationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReconciledDepreciation.Get(), o.ReconciledDepreciation.IsSet()
}

// HasReconciledDepreciation returns a boolean if a field has been set.
func (o *IncomeStatement) HasReconciledDepreciation() bool {
	if o != nil && o.ReconciledDepreciation.IsSet() {
		return true
	}

	return false
}

// SetReconciledDepreciation gets a reference to the given NullableString and assigns it to the ReconciledDepreciation field.
func (o *IncomeStatement) SetReconciledDepreciation(v string) {
	o.ReconciledDepreciation.Set(&v)
}

// SetReconciledDepreciationNil sets the value for ReconciledDepreciation to be an explicit nil
func (o *IncomeStatement) SetReconciledDepreciationNil() {
	o.ReconciledDepreciation.Set(nil)
}

// UnsetReconciledDepreciation ensures that no value is present for ReconciledDepreciation, not even an explicit nil
func (o *IncomeStatement) UnsetReconciledDepreciation() {
	o.ReconciledDepreciation.Unset()
}

// GetEbit returns the Ebit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetEbit() string {
	if o == nil || o.Ebit.Get() == nil {
		var ret string
		return ret
	}
	return *o.Ebit.Get()
}

// GetEbitOk returns a tuple with the Ebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetEbitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ebit.Get(), o.Ebit.IsSet()
}

// HasEbit returns a boolean if a field has been set.
func (o *IncomeStatement) HasEbit() bool {
	if o != nil && o.Ebit.IsSet() {
		return true
	}

	return false
}

// SetEbit gets a reference to the given NullableString and assigns it to the Ebit field.
func (o *IncomeStatement) SetEbit(v string) {
	o.Ebit.Set(&v)
}

// SetEbitNil sets the value for Ebit to be an explicit nil
func (o *IncomeStatement) SetEbitNil() {
	o.Ebit.Set(nil)
}

// UnsetEbit ensures that no value is present for Ebit, not even an explicit nil
func (o *IncomeStatement) UnsetEbit() {
	o.Ebit.Unset()
}

// GetEbitda returns the Ebitda field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetEbitda() string {
	if o == nil || o.Ebitda.Get() == nil {
		var ret string
		return ret
	}
	return *o.Ebitda.Get()
}

// GetEbitdaOk returns a tuple with the Ebitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetEbitdaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ebitda.Get(), o.Ebitda.IsSet()
}

// HasEbitda returns a boolean if a field has been set.
func (o *IncomeStatement) HasEbitda() bool {
	if o != nil && o.Ebitda.IsSet() {
		return true
	}

	return false
}

// SetEbitda gets a reference to the given NullableString and assigns it to the Ebitda field.
func (o *IncomeStatement) SetEbitda(v string) {
	o.Ebitda.Set(&v)
}

// SetEbitdaNil sets the value for Ebitda to be an explicit nil
func (o *IncomeStatement) SetEbitdaNil() {
	o.Ebitda.Set(nil)
}

// UnsetEbitda ensures that no value is present for Ebitda, not even an explicit nil
func (o *IncomeStatement) UnsetEbitda() {
	o.Ebitda.Unset()
}

// GetDepreciationAndAmortization returns the DepreciationAndAmortization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetDepreciationAndAmortization() string {
	if o == nil || o.DepreciationAndAmortization.Get() == nil {
		var ret string
		return ret
	}
	return *o.DepreciationAndAmortization.Get()
}

// GetDepreciationAndAmortizationOk returns a tuple with the DepreciationAndAmortization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetDepreciationAndAmortizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepreciationAndAmortization.Get(), o.DepreciationAndAmortization.IsSet()
}

// HasDepreciationAndAmortization returns a boolean if a field has been set.
func (o *IncomeStatement) HasDepreciationAndAmortization() bool {
	if o != nil && o.DepreciationAndAmortization.IsSet() {
		return true
	}

	return false
}

// SetDepreciationAndAmortization gets a reference to the given NullableString and assigns it to the DepreciationAndAmortization field.
func (o *IncomeStatement) SetDepreciationAndAmortization(v string) {
	o.DepreciationAndAmortization.Set(&v)
}

// SetDepreciationAndAmortizationNil sets the value for DepreciationAndAmortization to be an explicit nil
func (o *IncomeStatement) SetDepreciationAndAmortizationNil() {
	o.DepreciationAndAmortization.Set(nil)
}

// UnsetDepreciationAndAmortization ensures that no value is present for DepreciationAndAmortization, not even an explicit nil
func (o *IncomeStatement) UnsetDepreciationAndAmortization() {
	o.DepreciationAndAmortization.Unset()
}

// GetNonOperatingIncomeNetOther returns the NonOperatingIncomeNetOther field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetNonOperatingIncomeNetOther() string {
	if o == nil || o.NonOperatingIncomeNetOther.Get() == nil {
		var ret string
		return ret
	}
	return *o.NonOperatingIncomeNetOther.Get()
}

// GetNonOperatingIncomeNetOtherOk returns a tuple with the NonOperatingIncomeNetOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNonOperatingIncomeNetOtherOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonOperatingIncomeNetOther.Get(), o.NonOperatingIncomeNetOther.IsSet()
}

// HasNonOperatingIncomeNetOther returns a boolean if a field has been set.
func (o *IncomeStatement) HasNonOperatingIncomeNetOther() bool {
	if o != nil && o.NonOperatingIncomeNetOther.IsSet() {
		return true
	}

	return false
}

// SetNonOperatingIncomeNetOther gets a reference to the given NullableString and assigns it to the NonOperatingIncomeNetOther field.
func (o *IncomeStatement) SetNonOperatingIncomeNetOther(v string) {
	o.NonOperatingIncomeNetOther.Set(&v)
}

// SetNonOperatingIncomeNetOtherNil sets the value for NonOperatingIncomeNetOther to be an explicit nil
func (o *IncomeStatement) SetNonOperatingIncomeNetOtherNil() {
	o.NonOperatingIncomeNetOther.Set(nil)
}

// UnsetNonOperatingIncomeNetOther ensures that no value is present for NonOperatingIncomeNetOther, not even an explicit nil
func (o *IncomeStatement) UnsetNonOperatingIncomeNetOther() {
	o.NonOperatingIncomeNetOther.Unset()
}

// GetOperatingIncome returns the OperatingIncome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetOperatingIncome() string {
	if o == nil || o.OperatingIncome.Get() == nil {
		var ret string
		return ret
	}
	return *o.OperatingIncome.Get()
}

// GetOperatingIncomeOk returns a tuple with the OperatingIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetOperatingIncomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperatingIncome.Get(), o.OperatingIncome.IsSet()
}

// HasOperatingIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasOperatingIncome() bool {
	if o != nil && o.OperatingIncome.IsSet() {
		return true
	}

	return false
}

// SetOperatingIncome gets a reference to the given NullableString and assigns it to the OperatingIncome field.
func (o *IncomeStatement) SetOperatingIncome(v string) {
	o.OperatingIncome.Set(&v)
}

// SetOperatingIncomeNil sets the value for OperatingIncome to be an explicit nil
func (o *IncomeStatement) SetOperatingIncomeNil() {
	o.OperatingIncome.Set(nil)
}

// UnsetOperatingIncome ensures that no value is present for OperatingIncome, not even an explicit nil
func (o *IncomeStatement) UnsetOperatingIncome() {
	o.OperatingIncome.Unset()
}

// GetOtherOperatingExpenses returns the OtherOperatingExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetOtherOperatingExpenses() string {
	if o == nil || o.OtherOperatingExpenses.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtherOperatingExpenses.Get()
}

// GetOtherOperatingExpensesOk returns a tuple with the OtherOperatingExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetOtherOperatingExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherOperatingExpenses.Get(), o.OtherOperatingExpenses.IsSet()
}

// HasOtherOperatingExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasOtherOperatingExpenses() bool {
	if o != nil && o.OtherOperatingExpenses.IsSet() {
		return true
	}

	return false
}

// SetOtherOperatingExpenses gets a reference to the given NullableString and assigns it to the OtherOperatingExpenses field.
func (o *IncomeStatement) SetOtherOperatingExpenses(v string) {
	o.OtherOperatingExpenses.Set(&v)
}

// SetOtherOperatingExpensesNil sets the value for OtherOperatingExpenses to be an explicit nil
func (o *IncomeStatement) SetOtherOperatingExpensesNil() {
	o.OtherOperatingExpenses.Set(nil)
}

// UnsetOtherOperatingExpenses ensures that no value is present for OtherOperatingExpenses, not even an explicit nil
func (o *IncomeStatement) UnsetOtherOperatingExpenses() {
	o.OtherOperatingExpenses.Unset()
}

// GetInterestExpense returns the InterestExpense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetInterestExpense() string {
	if o == nil || o.InterestExpense.Get() == nil {
		var ret string
		return ret
	}
	return *o.InterestExpense.Get()
}

// GetInterestExpenseOk returns a tuple with the InterestExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetInterestExpenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InterestExpense.Get(), o.InterestExpense.IsSet()
}

// HasInterestExpense returns a boolean if a field has been set.
func (o *IncomeStatement) HasInterestExpense() bool {
	if o != nil && o.InterestExpense.IsSet() {
		return true
	}

	return false
}

// SetInterestExpense gets a reference to the given NullableString and assigns it to the InterestExpense field.
func (o *IncomeStatement) SetInterestExpense(v string) {
	o.InterestExpense.Set(&v)
}

// SetInterestExpenseNil sets the value for InterestExpense to be an explicit nil
func (o *IncomeStatement) SetInterestExpenseNil() {
	o.InterestExpense.Set(nil)
}

// UnsetInterestExpense ensures that no value is present for InterestExpense, not even an explicit nil
func (o *IncomeStatement) UnsetInterestExpense() {
	o.InterestExpense.Unset()
}

// GetTaxProvision returns the TaxProvision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetTaxProvision() string {
	if o == nil || o.TaxProvision.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaxProvision.Get()
}

// GetTaxProvisionOk returns a tuple with the TaxProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetTaxProvisionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxProvision.Get(), o.TaxProvision.IsSet()
}

// HasTaxProvision returns a boolean if a field has been set.
func (o *IncomeStatement) HasTaxProvision() bool {
	if o != nil && o.TaxProvision.IsSet() {
		return true
	}

	return false
}

// SetTaxProvision gets a reference to the given NullableString and assigns it to the TaxProvision field.
func (o *IncomeStatement) SetTaxProvision(v string) {
	o.TaxProvision.Set(&v)
}

// SetTaxProvisionNil sets the value for TaxProvision to be an explicit nil
func (o *IncomeStatement) SetTaxProvisionNil() {
	o.TaxProvision.Set(nil)
}

// UnsetTaxProvision ensures that no value is present for TaxProvision, not even an explicit nil
func (o *IncomeStatement) UnsetTaxProvision() {
	o.TaxProvision.Unset()
}

// GetInterestIncome returns the InterestIncome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetInterestIncome() string {
	if o == nil || o.InterestIncome.Get() == nil {
		var ret string
		return ret
	}
	return *o.InterestIncome.Get()
}

// GetInterestIncomeOk returns a tuple with the InterestIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetInterestIncomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InterestIncome.Get(), o.InterestIncome.IsSet()
}

// HasInterestIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasInterestIncome() bool {
	if o != nil && o.InterestIncome.IsSet() {
		return true
	}

	return false
}

// SetInterestIncome gets a reference to the given NullableString and assigns it to the InterestIncome field.
func (o *IncomeStatement) SetInterestIncome(v string) {
	o.InterestIncome.Set(&v)
}

// SetInterestIncomeNil sets the value for InterestIncome to be an explicit nil
func (o *IncomeStatement) SetInterestIncomeNil() {
	o.InterestIncome.Set(nil)
}

// UnsetInterestIncome ensures that no value is present for InterestIncome, not even an explicit nil
func (o *IncomeStatement) UnsetInterestIncome() {
	o.InterestIncome.Unset()
}

// GetNetInterestIncome returns the NetInterestIncome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetNetInterestIncome() string {
	if o == nil || o.NetInterestIncome.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetInterestIncome.Get()
}

// GetNetInterestIncomeOk returns a tuple with the NetInterestIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNetInterestIncomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetInterestIncome.Get(), o.NetInterestIncome.IsSet()
}

// HasNetInterestIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasNetInterestIncome() bool {
	if o != nil && o.NetInterestIncome.IsSet() {
		return true
	}

	return false
}

// SetNetInterestIncome gets a reference to the given NullableString and assigns it to the NetInterestIncome field.
func (o *IncomeStatement) SetNetInterestIncome(v string) {
	o.NetInterestIncome.Set(&v)
}

// SetNetInterestIncomeNil sets the value for NetInterestIncome to be an explicit nil
func (o *IncomeStatement) SetNetInterestIncomeNil() {
	o.NetInterestIncome.Set(nil)
}

// UnsetNetInterestIncome ensures that no value is present for NetInterestIncome, not even an explicit nil
func (o *IncomeStatement) UnsetNetInterestIncome() {
	o.NetInterestIncome.Unset()
}

// GetExtraordinaryItems returns the ExtraordinaryItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetExtraordinaryItems() string {
	if o == nil || o.ExtraordinaryItems.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExtraordinaryItems.Get()
}

// GetExtraordinaryItemsOk returns a tuple with the ExtraordinaryItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetExtraordinaryItemsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtraordinaryItems.Get(), o.ExtraordinaryItems.IsSet()
}

// HasExtraordinaryItems returns a boolean if a field has been set.
func (o *IncomeStatement) HasExtraordinaryItems() bool {
	if o != nil && o.ExtraordinaryItems.IsSet() {
		return true
	}

	return false
}

// SetExtraordinaryItems gets a reference to the given NullableString and assigns it to the ExtraordinaryItems field.
func (o *IncomeStatement) SetExtraordinaryItems(v string) {
	o.ExtraordinaryItems.Set(&v)
}

// SetExtraordinaryItemsNil sets the value for ExtraordinaryItems to be an explicit nil
func (o *IncomeStatement) SetExtraordinaryItemsNil() {
	o.ExtraordinaryItems.Set(nil)
}

// UnsetExtraordinaryItems ensures that no value is present for ExtraordinaryItems, not even an explicit nil
func (o *IncomeStatement) UnsetExtraordinaryItems() {
	o.ExtraordinaryItems.Unset()
}

// GetNonRecurring returns the NonRecurring field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetNonRecurring() string {
	if o == nil || o.NonRecurring.Get() == nil {
		var ret string
		return ret
	}
	return *o.NonRecurring.Get()
}

// GetNonRecurringOk returns a tuple with the NonRecurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNonRecurringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonRecurring.Get(), o.NonRecurring.IsSet()
}

// HasNonRecurring returns a boolean if a field has been set.
func (o *IncomeStatement) HasNonRecurring() bool {
	if o != nil && o.NonRecurring.IsSet() {
		return true
	}

	return false
}

// SetNonRecurring gets a reference to the given NullableString and assigns it to the NonRecurring field.
func (o *IncomeStatement) SetNonRecurring(v string) {
	o.NonRecurring.Set(&v)
}

// SetNonRecurringNil sets the value for NonRecurring to be an explicit nil
func (o *IncomeStatement) SetNonRecurringNil() {
	o.NonRecurring.Set(nil)
}

// UnsetNonRecurring ensures that no value is present for NonRecurring, not even an explicit nil
func (o *IncomeStatement) UnsetNonRecurring() {
	o.NonRecurring.Unset()
}

// GetOtherItems returns the OtherItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetOtherItems() string {
	if o == nil || o.OtherItems.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtherItems.Get()
}

// GetOtherItemsOk returns a tuple with the OtherItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetOtherItemsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherItems.Get(), o.OtherItems.IsSet()
}

// HasOtherItems returns a boolean if a field has been set.
func (o *IncomeStatement) HasOtherItems() bool {
	if o != nil && o.OtherItems.IsSet() {
		return true
	}

	return false
}

// SetOtherItems gets a reference to the given NullableString and assigns it to the OtherItems field.
func (o *IncomeStatement) SetOtherItems(v string) {
	o.OtherItems.Set(&v)
}

// SetOtherItemsNil sets the value for OtherItems to be an explicit nil
func (o *IncomeStatement) SetOtherItemsNil() {
	o.OtherItems.Set(nil)
}

// UnsetOtherItems ensures that no value is present for OtherItems, not even an explicit nil
func (o *IncomeStatement) UnsetOtherItems() {
	o.OtherItems.Unset()
}

// GetIncomeTaxExpense returns the IncomeTaxExpense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetIncomeTaxExpense() string {
	if o == nil || o.IncomeTaxExpense.Get() == nil {
		var ret string
		return ret
	}
	return *o.IncomeTaxExpense.Get()
}

// GetIncomeTaxExpenseOk returns a tuple with the IncomeTaxExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetIncomeTaxExpenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncomeTaxExpense.Get(), o.IncomeTaxExpense.IsSet()
}

// HasIncomeTaxExpense returns a boolean if a field has been set.
func (o *IncomeStatement) HasIncomeTaxExpense() bool {
	if o != nil && o.IncomeTaxExpense.IsSet() {
		return true
	}

	return false
}

// SetIncomeTaxExpense gets a reference to the given NullableString and assigns it to the IncomeTaxExpense field.
func (o *IncomeStatement) SetIncomeTaxExpense(v string) {
	o.IncomeTaxExpense.Set(&v)
}

// SetIncomeTaxExpenseNil sets the value for IncomeTaxExpense to be an explicit nil
func (o *IncomeStatement) SetIncomeTaxExpenseNil() {
	o.IncomeTaxExpense.Set(nil)
}

// UnsetIncomeTaxExpense ensures that no value is present for IncomeTaxExpense, not even an explicit nil
func (o *IncomeStatement) UnsetIncomeTaxExpense() {
	o.IncomeTaxExpense.Unset()
}

// GetTotalRevenue returns the TotalRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetTotalRevenue() string {
	if o == nil || o.TotalRevenue.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalRevenue.Get()
}

// GetTotalRevenueOk returns a tuple with the TotalRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetTotalRevenueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalRevenue.Get(), o.TotalRevenue.IsSet()
}

// HasTotalRevenue returns a boolean if a field has been set.
func (o *IncomeStatement) HasTotalRevenue() bool {
	if o != nil && o.TotalRevenue.IsSet() {
		return true
	}

	return false
}

// SetTotalRevenue gets a reference to the given NullableString and assigns it to the TotalRevenue field.
func (o *IncomeStatement) SetTotalRevenue(v string) {
	o.TotalRevenue.Set(&v)
}

// SetTotalRevenueNil sets the value for TotalRevenue to be an explicit nil
func (o *IncomeStatement) SetTotalRevenueNil() {
	o.TotalRevenue.Set(nil)
}

// UnsetTotalRevenue ensures that no value is present for TotalRevenue, not even an explicit nil
func (o *IncomeStatement) UnsetTotalRevenue() {
	o.TotalRevenue.Unset()
}

// GetTotalOperatingExpenses returns the TotalOperatingExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetTotalOperatingExpenses() string {
	if o == nil || o.TotalOperatingExpenses.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalOperatingExpenses.Get()
}

// GetTotalOperatingExpensesOk returns a tuple with the TotalOperatingExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetTotalOperatingExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalOperatingExpenses.Get(), o.TotalOperatingExpenses.IsSet()
}

// HasTotalOperatingExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasTotalOperatingExpenses() bool {
	if o != nil && o.TotalOperatingExpenses.IsSet() {
		return true
	}

	return false
}

// SetTotalOperatingExpenses gets a reference to the given NullableString and assigns it to the TotalOperatingExpenses field.
func (o *IncomeStatement) SetTotalOperatingExpenses(v string) {
	o.TotalOperatingExpenses.Set(&v)
}

// SetTotalOperatingExpensesNil sets the value for TotalOperatingExpenses to be an explicit nil
func (o *IncomeStatement) SetTotalOperatingExpensesNil() {
	o.TotalOperatingExpenses.Set(nil)
}

// UnsetTotalOperatingExpenses ensures that no value is present for TotalOperatingExpenses, not even an explicit nil
func (o *IncomeStatement) UnsetTotalOperatingExpenses() {
	o.TotalOperatingExpenses.Unset()
}

// GetCostOfRevenue returns the CostOfRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetCostOfRevenue() string {
	if o == nil || o.CostOfRevenue.Get() == nil {
		var ret string
		return ret
	}
	return *o.CostOfRevenue.Get()
}

// GetCostOfRevenueOk returns a tuple with the CostOfRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetCostOfRevenueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CostOfRevenue.Get(), o.CostOfRevenue.IsSet()
}

// HasCostOfRevenue returns a boolean if a field has been set.
func (o *IncomeStatement) HasCostOfRevenue() bool {
	if o != nil && o.CostOfRevenue.IsSet() {
		return true
	}

	return false
}

// SetCostOfRevenue gets a reference to the given NullableString and assigns it to the CostOfRevenue field.
func (o *IncomeStatement) SetCostOfRevenue(v string) {
	o.CostOfRevenue.Set(&v)
}

// SetCostOfRevenueNil sets the value for CostOfRevenue to be an explicit nil
func (o *IncomeStatement) SetCostOfRevenueNil() {
	o.CostOfRevenue.Set(nil)
}

// UnsetCostOfRevenue ensures that no value is present for CostOfRevenue, not even an explicit nil
func (o *IncomeStatement) UnsetCostOfRevenue() {
	o.CostOfRevenue.Unset()
}

// GetTotalOtherIncomeExpenseNet returns the TotalOtherIncomeExpenseNet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetTotalOtherIncomeExpenseNet() string {
	if o == nil || o.TotalOtherIncomeExpenseNet.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalOtherIncomeExpenseNet.Get()
}

// GetTotalOtherIncomeExpenseNetOk returns a tuple with the TotalOtherIncomeExpenseNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetTotalOtherIncomeExpenseNetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalOtherIncomeExpenseNet.Get(), o.TotalOtherIncomeExpenseNet.IsSet()
}

// HasTotalOtherIncomeExpenseNet returns a boolean if a field has been set.
func (o *IncomeStatement) HasTotalOtherIncomeExpenseNet() bool {
	if o != nil && o.TotalOtherIncomeExpenseNet.IsSet() {
		return true
	}

	return false
}

// SetTotalOtherIncomeExpenseNet gets a reference to the given NullableString and assigns it to the TotalOtherIncomeExpenseNet field.
func (o *IncomeStatement) SetTotalOtherIncomeExpenseNet(v string) {
	o.TotalOtherIncomeExpenseNet.Set(&v)
}

// SetTotalOtherIncomeExpenseNetNil sets the value for TotalOtherIncomeExpenseNet to be an explicit nil
func (o *IncomeStatement) SetTotalOtherIncomeExpenseNetNil() {
	o.TotalOtherIncomeExpenseNet.Set(nil)
}

// UnsetTotalOtherIncomeExpenseNet ensures that no value is present for TotalOtherIncomeExpenseNet, not even an explicit nil
func (o *IncomeStatement) UnsetTotalOtherIncomeExpenseNet() {
	o.TotalOtherIncomeExpenseNet.Unset()
}

// GetDiscontinuedOperations returns the DiscontinuedOperations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetDiscontinuedOperations() string {
	if o == nil || o.DiscontinuedOperations.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiscontinuedOperations.Get()
}

// GetDiscontinuedOperationsOk returns a tuple with the DiscontinuedOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetDiscontinuedOperationsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscontinuedOperations.Get(), o.DiscontinuedOperations.IsSet()
}

// HasDiscontinuedOperations returns a boolean if a field has been set.
func (o *IncomeStatement) HasDiscontinuedOperations() bool {
	if o != nil && o.DiscontinuedOperations.IsSet() {
		return true
	}

	return false
}

// SetDiscontinuedOperations gets a reference to the given NullableString and assigns it to the DiscontinuedOperations field.
func (o *IncomeStatement) SetDiscontinuedOperations(v string) {
	o.DiscontinuedOperations.Set(&v)
}

// SetDiscontinuedOperationsNil sets the value for DiscontinuedOperations to be an explicit nil
func (o *IncomeStatement) SetDiscontinuedOperationsNil() {
	o.DiscontinuedOperations.Set(nil)
}

// UnsetDiscontinuedOperations ensures that no value is present for DiscontinuedOperations, not even an explicit nil
func (o *IncomeStatement) UnsetDiscontinuedOperations() {
	o.DiscontinuedOperations.Unset()
}

// GetNetIncomeFromContinuingOps returns the NetIncomeFromContinuingOps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetNetIncomeFromContinuingOps() string {
	if o == nil || o.NetIncomeFromContinuingOps.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetIncomeFromContinuingOps.Get()
}

// GetNetIncomeFromContinuingOpsOk returns a tuple with the NetIncomeFromContinuingOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNetIncomeFromContinuingOpsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetIncomeFromContinuingOps.Get(), o.NetIncomeFromContinuingOps.IsSet()
}

// HasNetIncomeFromContinuingOps returns a boolean if a field has been set.
func (o *IncomeStatement) HasNetIncomeFromContinuingOps() bool {
	if o != nil && o.NetIncomeFromContinuingOps.IsSet() {
		return true
	}

	return false
}

// SetNetIncomeFromContinuingOps gets a reference to the given NullableString and assigns it to the NetIncomeFromContinuingOps field.
func (o *IncomeStatement) SetNetIncomeFromContinuingOps(v string) {
	o.NetIncomeFromContinuingOps.Set(&v)
}

// SetNetIncomeFromContinuingOpsNil sets the value for NetIncomeFromContinuingOps to be an explicit nil
func (o *IncomeStatement) SetNetIncomeFromContinuingOpsNil() {
	o.NetIncomeFromContinuingOps.Set(nil)
}

// UnsetNetIncomeFromContinuingOps ensures that no value is present for NetIncomeFromContinuingOps, not even an explicit nil
func (o *IncomeStatement) UnsetNetIncomeFromContinuingOps() {
	o.NetIncomeFromContinuingOps.Unset()
}

// GetNetIncomeApplicableToCommonShares returns the NetIncomeApplicableToCommonShares field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetNetIncomeApplicableToCommonShares() string {
	if o == nil || o.NetIncomeApplicableToCommonShares.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetIncomeApplicableToCommonShares.Get()
}

// GetNetIncomeApplicableToCommonSharesOk returns a tuple with the NetIncomeApplicableToCommonShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetNetIncomeApplicableToCommonSharesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetIncomeApplicableToCommonShares.Get(), o.NetIncomeApplicableToCommonShares.IsSet()
}

// HasNetIncomeApplicableToCommonShares returns a boolean if a field has been set.
func (o *IncomeStatement) HasNetIncomeApplicableToCommonShares() bool {
	if o != nil && o.NetIncomeApplicableToCommonShares.IsSet() {
		return true
	}

	return false
}

// SetNetIncomeApplicableToCommonShares gets a reference to the given NullableString and assigns it to the NetIncomeApplicableToCommonShares field.
func (o *IncomeStatement) SetNetIncomeApplicableToCommonShares(v string) {
	o.NetIncomeApplicableToCommonShares.Set(&v)
}

// SetNetIncomeApplicableToCommonSharesNil sets the value for NetIncomeApplicableToCommonShares to be an explicit nil
func (o *IncomeStatement) SetNetIncomeApplicableToCommonSharesNil() {
	o.NetIncomeApplicableToCommonShares.Set(nil)
}

// UnsetNetIncomeApplicableToCommonShares ensures that no value is present for NetIncomeApplicableToCommonShares, not even an explicit nil
func (o *IncomeStatement) UnsetNetIncomeApplicableToCommonShares() {
	o.NetIncomeApplicableToCommonShares.Unset()
}

// GetPreferredStockAndOtherAdjustments returns the PreferredStockAndOtherAdjustments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeStatement) GetPreferredStockAndOtherAdjustments() string {
	if o == nil || o.PreferredStockAndOtherAdjustments.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredStockAndOtherAdjustments.Get()
}

// GetPreferredStockAndOtherAdjustmentsOk returns a tuple with the PreferredStockAndOtherAdjustments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeStatement) GetPreferredStockAndOtherAdjustmentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredStockAndOtherAdjustments.Get(), o.PreferredStockAndOtherAdjustments.IsSet()
}

// HasPreferredStockAndOtherAdjustments returns a boolean if a field has been set.
func (o *IncomeStatement) HasPreferredStockAndOtherAdjustments() bool {
	if o != nil && o.PreferredStockAndOtherAdjustments.IsSet() {
		return true
	}

	return false
}

// SetPreferredStockAndOtherAdjustments gets a reference to the given NullableString and assigns it to the PreferredStockAndOtherAdjustments field.
func (o *IncomeStatement) SetPreferredStockAndOtherAdjustments(v string) {
	o.PreferredStockAndOtherAdjustments.Set(&v)
}

// SetPreferredStockAndOtherAdjustmentsNil sets the value for PreferredStockAndOtherAdjustments to be an explicit nil
func (o *IncomeStatement) SetPreferredStockAndOtherAdjustmentsNil() {
	o.PreferredStockAndOtherAdjustments.Set(nil)
}

// UnsetPreferredStockAndOtherAdjustments ensures that no value is present for PreferredStockAndOtherAdjustments, not even an explicit nil
func (o *IncomeStatement) UnsetPreferredStockAndOtherAdjustments() {
	o.PreferredStockAndOtherAdjustments.Unset()
}

func (o IncomeStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.FilingDate != nil {
		toSerialize["filing_date"] = o.FilingDate
	}
	if o.CurrencySymbol != nil {
		toSerialize["currency_symbol"] = o.CurrencySymbol
	}
	if o.ResearchDevelopment.IsSet() {
		toSerialize["researchDevelopment"] = o.ResearchDevelopment.Get()
	}
	if o.EffectOfAccountingCharges.IsSet() {
		toSerialize["effectOfAccountingCharges"] = o.EffectOfAccountingCharges.Get()
	}
	if o.IncomeBeforeTax.IsSet() {
		toSerialize["incomeBeforeTax"] = o.IncomeBeforeTax.Get()
	}
	if o.MinorityInterest.IsSet() {
		toSerialize["minorityInterest"] = o.MinorityInterest.Get()
	}
	if o.NetIncome.IsSet() {
		toSerialize["netIncome"] = o.NetIncome.Get()
	}
	if o.SellingGeneralAdministrative.IsSet() {
		toSerialize["sellingGeneralAdministrative"] = o.SellingGeneralAdministrative.Get()
	}
	if o.SellingAndMarketingExpenses.IsSet() {
		toSerialize["sellingAndMarketingExpenses"] = o.SellingAndMarketingExpenses.Get()
	}
	if o.GrossProfit.IsSet() {
		toSerialize["grossProfit"] = o.GrossProfit.Get()
	}
	if o.ReconciledDepreciation.IsSet() {
		toSerialize["reconciledDepreciation"] = o.ReconciledDepreciation.Get()
	}
	if o.Ebit.IsSet() {
		toSerialize["ebit"] = o.Ebit.Get()
	}
	if o.Ebitda.IsSet() {
		toSerialize["ebitda"] = o.Ebitda.Get()
	}
	if o.DepreciationAndAmortization.IsSet() {
		toSerialize["depreciationAndAmortization"] = o.DepreciationAndAmortization.Get()
	}
	if o.NonOperatingIncomeNetOther.IsSet() {
		toSerialize["nonOperatingIncomeNetOther"] = o.NonOperatingIncomeNetOther.Get()
	}
	if o.OperatingIncome.IsSet() {
		toSerialize["operatingIncome"] = o.OperatingIncome.Get()
	}
	if o.OtherOperatingExpenses.IsSet() {
		toSerialize["otherOperatingExpenses"] = o.OtherOperatingExpenses.Get()
	}
	if o.InterestExpense.IsSet() {
		toSerialize["interestExpense"] = o.InterestExpense.Get()
	}
	if o.TaxProvision.IsSet() {
		toSerialize["taxProvision"] = o.TaxProvision.Get()
	}
	if o.InterestIncome.IsSet() {
		toSerialize["interestIncome"] = o.InterestIncome.Get()
	}
	if o.NetInterestIncome.IsSet() {
		toSerialize["netInterestIncome"] = o.NetInterestIncome.Get()
	}
	if o.ExtraordinaryItems.IsSet() {
		toSerialize["extraordinaryItems"] = o.ExtraordinaryItems.Get()
	}
	if o.NonRecurring.IsSet() {
		toSerialize["nonRecurring"] = o.NonRecurring.Get()
	}
	if o.OtherItems.IsSet() {
		toSerialize["otherItems"] = o.OtherItems.Get()
	}
	if o.IncomeTaxExpense.IsSet() {
		toSerialize["incomeTaxExpense"] = o.IncomeTaxExpense.Get()
	}
	if o.TotalRevenue.IsSet() {
		toSerialize["totalRevenue"] = o.TotalRevenue.Get()
	}
	if o.TotalOperatingExpenses.IsSet() {
		toSerialize["totalOperatingExpenses"] = o.TotalOperatingExpenses.Get()
	}
	if o.CostOfRevenue.IsSet() {
		toSerialize["costOfRevenue"] = o.CostOfRevenue.Get()
	}
	if o.TotalOtherIncomeExpenseNet.IsSet() {
		toSerialize["totalOtherIncomeExpenseNet"] = o.TotalOtherIncomeExpenseNet.Get()
	}
	if o.DiscontinuedOperations.IsSet() {
		toSerialize["discontinuedOperations"] = o.DiscontinuedOperations.Get()
	}
	if o.NetIncomeFromContinuingOps.IsSet() {
		toSerialize["netIncomeFromContinuingOps"] = o.NetIncomeFromContinuingOps.Get()
	}
	if o.NetIncomeApplicableToCommonShares.IsSet() {
		toSerialize["netIncomeApplicableToCommonShares"] = o.NetIncomeApplicableToCommonShares.Get()
	}
	if o.PreferredStockAndOtherAdjustments.IsSet() {
		toSerialize["preferredStockAndOtherAdjustments"] = o.PreferredStockAndOtherAdjustments.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIncomeStatement struct {
	value *IncomeStatement
	isSet bool
}

func (v NullableIncomeStatement) Get() *IncomeStatement {
	return v.value
}

func (v *NullableIncomeStatement) Set(val *IncomeStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomeStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomeStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomeStatement(val *IncomeStatement) *NullableIncomeStatement {
	return &NullableIncomeStatement{value: val, isSet: true}
}

func (v NullableIncomeStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomeStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
