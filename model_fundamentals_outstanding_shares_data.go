/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsOutstandingSharesData struct for FundamentalsOutstandingSharesData
type FundamentalsOutstandingSharesData struct {
	Date          *string  `json:"date,omitempty"`
	DateFormatted *string  `json:"dateFormatted,omitempty"`
	SharesMln     *string  `json:"sharesMln,omitempty"`
	Shares        *float64 `json:"shares,omitempty"`
}

// NewFundamentalsOutstandingSharesData instantiates a new FundamentalsOutstandingSharesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsOutstandingSharesData() *FundamentalsOutstandingSharesData {
	this := FundamentalsOutstandingSharesData{}
	return &this
}

// NewFundamentalsOutstandingSharesDataWithDefaults instantiates a new FundamentalsOutstandingSharesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsOutstandingSharesDataWithDefaults() *FundamentalsOutstandingSharesData {
	this := FundamentalsOutstandingSharesData{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *FundamentalsOutstandingSharesData) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsOutstandingSharesData) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *FundamentalsOutstandingSharesData) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *FundamentalsOutstandingSharesData) SetDate(v string) {
	o.Date = &v
}

// GetDateFormatted returns the DateFormatted field value if set, zero value otherwise.
func (o *FundamentalsOutstandingSharesData) GetDateFormatted() string {
	if o == nil || o.DateFormatted == nil {
		var ret string
		return ret
	}
	return *o.DateFormatted
}

// GetDateFormattedOk returns a tuple with the DateFormatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsOutstandingSharesData) GetDateFormattedOk() (*string, bool) {
	if o == nil || o.DateFormatted == nil {
		return nil, false
	}
	return o.DateFormatted, true
}

// HasDateFormatted returns a boolean if a field has been set.
func (o *FundamentalsOutstandingSharesData) HasDateFormatted() bool {
	if o != nil && o.DateFormatted != nil {
		return true
	}

	return false
}

// SetDateFormatted gets a reference to the given string and assigns it to the DateFormatted field.
func (o *FundamentalsOutstandingSharesData) SetDateFormatted(v string) {
	o.DateFormatted = &v
}

// GetSharesMln returns the SharesMln field value if set, zero value otherwise.
func (o *FundamentalsOutstandingSharesData) GetSharesMln() string {
	if o == nil || o.SharesMln == nil {
		var ret string
		return ret
	}
	return *o.SharesMln
}

// GetSharesMlnOk returns a tuple with the SharesMln field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsOutstandingSharesData) GetSharesMlnOk() (*string, bool) {
	if o == nil || o.SharesMln == nil {
		return nil, false
	}
	return o.SharesMln, true
}

// HasSharesMln returns a boolean if a field has been set.
func (o *FundamentalsOutstandingSharesData) HasSharesMln() bool {
	if o != nil && o.SharesMln != nil {
		return true
	}

	return false
}

// SetSharesMln gets a reference to the given string and assigns it to the SharesMln field.
func (o *FundamentalsOutstandingSharesData) SetSharesMln(v string) {
	o.SharesMln = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *FundamentalsOutstandingSharesData) GetShares() float64 {
	if o == nil || o.Shares == nil {
		var ret float64
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsOutstandingSharesData) GetSharesOk() (*float64, bool) {
	if o == nil || o.Shares == nil {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *FundamentalsOutstandingSharesData) HasShares() bool {
	if o != nil && o.Shares != nil {
		return true
	}

	return false
}

// SetShares gets a reference to the given float64 and assigns it to the Shares field.
func (o *FundamentalsOutstandingSharesData) SetShares(v float64) {
	o.Shares = &v
}

func (o FundamentalsOutstandingSharesData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.DateFormatted != nil {
		toSerialize["dateFormatted"] = o.DateFormatted
	}
	if o.SharesMln != nil {
		toSerialize["sharesMln"] = o.SharesMln
	}
	if o.Shares != nil {
		toSerialize["shares"] = o.Shares
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsOutstandingSharesData struct {
	value *FundamentalsOutstandingSharesData
	isSet bool
}

func (v NullableFundamentalsOutstandingSharesData) Get() *FundamentalsOutstandingSharesData {
	return v.value
}

func (v *NullableFundamentalsOutstandingSharesData) Set(val *FundamentalsOutstandingSharesData) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsOutstandingSharesData) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsOutstandingSharesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsOutstandingSharesData(val *FundamentalsOutstandingSharesData) *NullableFundamentalsOutstandingSharesData {
	return &NullableFundamentalsOutstandingSharesData{value: val, isSet: true}
}

func (v NullableFundamentalsOutstandingSharesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsOutstandingSharesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
