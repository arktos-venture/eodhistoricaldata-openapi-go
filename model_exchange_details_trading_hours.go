/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExchangeDetailsTradingHours struct for ExchangeDetailsTradingHours
type ExchangeDetailsTradingHours struct {
	Open        *string `json:"Open,omitempty"`
	Close       *string `json:"Close,omitempty"`
	WorkingDays *string `json:"WorkingDays,omitempty"`
}

// NewExchangeDetailsTradingHours instantiates a new ExchangeDetailsTradingHours object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeDetailsTradingHours() *ExchangeDetailsTradingHours {
	this := ExchangeDetailsTradingHours{}
	return &this
}

// NewExchangeDetailsTradingHoursWithDefaults instantiates a new ExchangeDetailsTradingHours object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeDetailsTradingHoursWithDefaults() *ExchangeDetailsTradingHours {
	this := ExchangeDetailsTradingHours{}
	return &this
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *ExchangeDetailsTradingHours) GetOpen() string {
	if o == nil || o.Open == nil {
		var ret string
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeDetailsTradingHours) GetOpenOk() (*string, bool) {
	if o == nil || o.Open == nil {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *ExchangeDetailsTradingHours) HasOpen() bool {
	if o != nil && o.Open != nil {
		return true
	}

	return false
}

// SetOpen gets a reference to the given string and assigns it to the Open field.
func (o *ExchangeDetailsTradingHours) SetOpen(v string) {
	o.Open = &v
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *ExchangeDetailsTradingHours) GetClose() string {
	if o == nil || o.Close == nil {
		var ret string
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeDetailsTradingHours) GetCloseOk() (*string, bool) {
	if o == nil || o.Close == nil {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *ExchangeDetailsTradingHours) HasClose() bool {
	if o != nil && o.Close != nil {
		return true
	}

	return false
}

// SetClose gets a reference to the given string and assigns it to the Close field.
func (o *ExchangeDetailsTradingHours) SetClose(v string) {
	o.Close = &v
}

// GetWorkingDays returns the WorkingDays field value if set, zero value otherwise.
func (o *ExchangeDetailsTradingHours) GetWorkingDays() string {
	if o == nil || o.WorkingDays == nil {
		var ret string
		return ret
	}
	return *o.WorkingDays
}

// GetWorkingDaysOk returns a tuple with the WorkingDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeDetailsTradingHours) GetWorkingDaysOk() (*string, bool) {
	if o == nil || o.WorkingDays == nil {
		return nil, false
	}
	return o.WorkingDays, true
}

// HasWorkingDays returns a boolean if a field has been set.
func (o *ExchangeDetailsTradingHours) HasWorkingDays() bool {
	if o != nil && o.WorkingDays != nil {
		return true
	}

	return false
}

// SetWorkingDays gets a reference to the given string and assigns it to the WorkingDays field.
func (o *ExchangeDetailsTradingHours) SetWorkingDays(v string) {
	o.WorkingDays = &v
}

func (o ExchangeDetailsTradingHours) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Open != nil {
		toSerialize["Open"] = o.Open
	}
	if o.Close != nil {
		toSerialize["Close"] = o.Close
	}
	if o.WorkingDays != nil {
		toSerialize["WorkingDays"] = o.WorkingDays
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeDetailsTradingHours struct {
	value *ExchangeDetailsTradingHours
	isSet bool
}

func (v NullableExchangeDetailsTradingHours) Get() *ExchangeDetailsTradingHours {
	return v.value
}

func (v *NullableExchangeDetailsTradingHours) Set(val *ExchangeDetailsTradingHours) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeDetailsTradingHours) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeDetailsTradingHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeDetailsTradingHours(val *ExchangeDetailsTradingHours) *NullableExchangeDetailsTradingHours {
	return &NullableExchangeDetailsTradingHours{value: val, isSet: true}
}

func (v NullableExchangeDetailsTradingHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeDetailsTradingHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
