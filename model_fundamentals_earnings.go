/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsEarnings struct for FundamentalsEarnings
type FundamentalsEarnings struct {
	History *map[string]FundamentalsEarningsHistory `json:"History,omitempty"`
	Trend   *map[string]FundamentalsEarningsTrend   `json:"Trend,omitempty"`
	Annual  *map[string]FundamentalsEarningsAnnual  `json:"Annual,omitempty"`
}

// NewFundamentalsEarnings instantiates a new FundamentalsEarnings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsEarnings() *FundamentalsEarnings {
	this := FundamentalsEarnings{}
	return &this
}

// NewFundamentalsEarningsWithDefaults instantiates a new FundamentalsEarnings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsEarningsWithDefaults() *FundamentalsEarnings {
	this := FundamentalsEarnings{}
	return &this
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *FundamentalsEarnings) GetHistory() map[string]FundamentalsEarningsHistory {
	if o == nil || o.History == nil {
		var ret map[string]FundamentalsEarningsHistory
		return ret
	}
	return *o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsEarnings) GetHistoryOk() (*map[string]FundamentalsEarningsHistory, bool) {
	if o == nil || o.History == nil {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *FundamentalsEarnings) HasHistory() bool {
	if o != nil && o.History != nil {
		return true
	}

	return false
}

// SetHistory gets a reference to the given map[string]FundamentalsEarningsHistory and assigns it to the History field.
func (o *FundamentalsEarnings) SetHistory(v map[string]FundamentalsEarningsHistory) {
	o.History = &v
}

// GetTrend returns the Trend field value if set, zero value otherwise.
func (o *FundamentalsEarnings) GetTrend() map[string]FundamentalsEarningsTrend {
	if o == nil || o.Trend == nil {
		var ret map[string]FundamentalsEarningsTrend
		return ret
	}
	return *o.Trend
}

// GetTrendOk returns a tuple with the Trend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsEarnings) GetTrendOk() (*map[string]FundamentalsEarningsTrend, bool) {
	if o == nil || o.Trend == nil {
		return nil, false
	}
	return o.Trend, true
}

// HasTrend returns a boolean if a field has been set.
func (o *FundamentalsEarnings) HasTrend() bool {
	if o != nil && o.Trend != nil {
		return true
	}

	return false
}

// SetTrend gets a reference to the given map[string]FundamentalsEarningsTrend and assigns it to the Trend field.
func (o *FundamentalsEarnings) SetTrend(v map[string]FundamentalsEarningsTrend) {
	o.Trend = &v
}

// GetAnnual returns the Annual field value if set, zero value otherwise.
func (o *FundamentalsEarnings) GetAnnual() map[string]FundamentalsEarningsAnnual {
	if o == nil || o.Annual == nil {
		var ret map[string]FundamentalsEarningsAnnual
		return ret
	}
	return *o.Annual
}

// GetAnnualOk returns a tuple with the Annual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsEarnings) GetAnnualOk() (*map[string]FundamentalsEarningsAnnual, bool) {
	if o == nil || o.Annual == nil {
		return nil, false
	}
	return o.Annual, true
}

// HasAnnual returns a boolean if a field has been set.
func (o *FundamentalsEarnings) HasAnnual() bool {
	if o != nil && o.Annual != nil {
		return true
	}

	return false
}

// SetAnnual gets a reference to the given map[string]FundamentalsEarningsAnnual and assigns it to the Annual field.
func (o *FundamentalsEarnings) SetAnnual(v map[string]FundamentalsEarningsAnnual) {
	o.Annual = &v
}

func (o FundamentalsEarnings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.History != nil {
		toSerialize["History"] = o.History
	}
	if o.Trend != nil {
		toSerialize["Trend"] = o.Trend
	}
	if o.Annual != nil {
		toSerialize["Annual"] = o.Annual
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsEarnings struct {
	value *FundamentalsEarnings
	isSet bool
}

func (v NullableFundamentalsEarnings) Get() *FundamentalsEarnings {
	return v.value
}

func (v *NullableFundamentalsEarnings) Set(val *FundamentalsEarnings) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsEarnings) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsEarnings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsEarnings(val *FundamentalsEarnings) *NullableFundamentalsEarnings {
	return &NullableFundamentalsEarnings{value: val, isSet: true}
}

func (v NullableFundamentalsEarnings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsEarnings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
