/*
eodhistoricaldata

eodhistoricaldata API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsSplitsDividendsNumberDividendsByYear struct for FundamentalsSplitsDividendsNumberDividendsByYear
type FundamentalsSplitsDividendsNumberDividendsByYear struct {
	Year  *int64 `json:"Year,omitempty"`
	Count *int64 `json:"Count,omitempty"`
}

// NewFundamentalsSplitsDividendsNumberDividendsByYear instantiates a new FundamentalsSplitsDividendsNumberDividendsByYear object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsSplitsDividendsNumberDividendsByYear() *FundamentalsSplitsDividendsNumberDividendsByYear {
	this := FundamentalsSplitsDividendsNumberDividendsByYear{}
	return &this
}

// NewFundamentalsSplitsDividendsNumberDividendsByYearWithDefaults instantiates a new FundamentalsSplitsDividendsNumberDividendsByYear object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsSplitsDividendsNumberDividendsByYearWithDefaults() *FundamentalsSplitsDividendsNumberDividendsByYear {
	this := FundamentalsSplitsDividendsNumberDividendsByYear{}
	return &this
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *FundamentalsSplitsDividendsNumberDividendsByYear) GetYear() int64 {
	if o == nil || o.Year == nil {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSplitsDividendsNumberDividendsByYear) GetYearOk() (*int64, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *FundamentalsSplitsDividendsNumberDividendsByYear) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *FundamentalsSplitsDividendsNumberDividendsByYear) SetYear(v int64) {
	o.Year = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *FundamentalsSplitsDividendsNumberDividendsByYear) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsSplitsDividendsNumberDividendsByYear) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *FundamentalsSplitsDividendsNumberDividendsByYear) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *FundamentalsSplitsDividendsNumberDividendsByYear) SetCount(v int64) {
	o.Count = &v
}

func (o FundamentalsSplitsDividendsNumberDividendsByYear) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Year != nil {
		toSerialize["Year"] = o.Year
	}
	if o.Count != nil {
		toSerialize["Count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsSplitsDividendsNumberDividendsByYear struct {
	value *FundamentalsSplitsDividendsNumberDividendsByYear
	isSet bool
}

func (v NullableFundamentalsSplitsDividendsNumberDividendsByYear) Get() *FundamentalsSplitsDividendsNumberDividendsByYear {
	return v.value
}

func (v *NullableFundamentalsSplitsDividendsNumberDividendsByYear) Set(val *FundamentalsSplitsDividendsNumberDividendsByYear) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsSplitsDividendsNumberDividendsByYear) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsSplitsDividendsNumberDividendsByYear) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsSplitsDividendsNumberDividendsByYear(val *FundamentalsSplitsDividendsNumberDividendsByYear) *NullableFundamentalsSplitsDividendsNumberDividendsByYear {
	return &NullableFundamentalsSplitsDividendsNumberDividendsByYear{value: val, isSet: true}
}

func (v NullableFundamentalsSplitsDividendsNumberDividendsByYear) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsSplitsDividendsNumberDividendsByYear) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
