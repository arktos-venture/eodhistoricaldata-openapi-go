/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExchangeTicker struct for ExchangeTicker
type ExchangeTicker struct {
	Code     *string        `json:"Code,omitempty"`
	Name     *string        `json:"Name,omitempty"`
	Country  *string        `json:"Country,omitempty"`
	Exchange *string        `json:"Exchange,omitempty"`
	Currency *string        `json:"Currency,omitempty"`
	Type     *string        `json:"Type,omitempty"`
	Isin     NullableString `json:"Isin,omitempty"`
}

// NewExchangeTicker instantiates a new ExchangeTicker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeTicker() *ExchangeTicker {
	this := ExchangeTicker{}
	return &this
}

// NewExchangeTickerWithDefaults instantiates a new ExchangeTicker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeTickerWithDefaults() *ExchangeTicker {
	this := ExchangeTicker{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ExchangeTicker) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeTicker) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ExchangeTicker) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ExchangeTicker) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExchangeTicker) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeTicker) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExchangeTicker) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExchangeTicker) SetName(v string) {
	o.Name = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ExchangeTicker) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeTicker) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ExchangeTicker) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *ExchangeTicker) SetCountry(v string) {
	o.Country = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *ExchangeTicker) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeTicker) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *ExchangeTicker) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *ExchangeTicker) SetExchange(v string) {
	o.Exchange = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ExchangeTicker) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeTicker) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ExchangeTicker) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ExchangeTicker) SetCurrency(v string) {
	o.Currency = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExchangeTicker) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeTicker) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExchangeTicker) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExchangeTicker) SetType(v string) {
	o.Type = &v
}

// GetIsin returns the Isin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeTicker) GetIsin() string {
	if o == nil || o.Isin.Get() == nil {
		var ret string
		return ret
	}
	return *o.Isin.Get()
}

// GetIsinOk returns a tuple with the Isin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeTicker) GetIsinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Isin.Get(), o.Isin.IsSet()
}

// HasIsin returns a boolean if a field has been set.
func (o *ExchangeTicker) HasIsin() bool {
	if o != nil && o.Isin.IsSet() {
		return true
	}

	return false
}

// SetIsin gets a reference to the given NullableString and assigns it to the Isin field.
func (o *ExchangeTicker) SetIsin(v string) {
	o.Isin.Set(&v)
}

// SetIsinNil sets the value for Isin to be an explicit nil
func (o *ExchangeTicker) SetIsinNil() {
	o.Isin.Set(nil)
}

// UnsetIsin ensures that no value is present for Isin, not even an explicit nil
func (o *ExchangeTicker) UnsetIsin() {
	o.Isin.Unset()
}

func (o ExchangeTicker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["Code"] = o.Code
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Country != nil {
		toSerialize["Country"] = o.Country
	}
	if o.Exchange != nil {
		toSerialize["Exchange"] = o.Exchange
	}
	if o.Currency != nil {
		toSerialize["Currency"] = o.Currency
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Isin.IsSet() {
		toSerialize["Isin"] = o.Isin.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeTicker struct {
	value *ExchangeTicker
	isSet bool
}

func (v NullableExchangeTicker) Get() *ExchangeTicker {
	return v.value
}

func (v *NullableExchangeTicker) Set(val *ExchangeTicker) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeTicker) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeTicker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeTicker(val *ExchangeTicker) *NullableExchangeTicker {
	return &NullableExchangeTicker{value: val, isSet: true}
}

func (v NullableExchangeTicker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeTicker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
