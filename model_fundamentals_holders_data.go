/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsHoldersData struct for FundamentalsHoldersData
type FundamentalsHoldersData struct {
	Name          *string  `json:"name,omitempty"`
	Date          *string  `json:"date,omitempty"`
	TotalShares   *float64 `json:"totalShares,omitempty"`
	TotalAssets   *float64 `json:"totalAssets,omitempty"`
	CurrentShares *int64   `json:"currentShares,omitempty"`
	Change        *int64   `json:"change,omitempty"`
	ChangeP       *float64 `json:"change_p,omitempty"`
}

// NewFundamentalsHoldersData instantiates a new FundamentalsHoldersData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsHoldersData() *FundamentalsHoldersData {
	this := FundamentalsHoldersData{}
	return &this
}

// NewFundamentalsHoldersDataWithDefaults instantiates a new FundamentalsHoldersData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsHoldersDataWithDefaults() *FundamentalsHoldersData {
	this := FundamentalsHoldersData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FundamentalsHoldersData) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHoldersData) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FundamentalsHoldersData) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FundamentalsHoldersData) SetName(v string) {
	o.Name = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *FundamentalsHoldersData) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHoldersData) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *FundamentalsHoldersData) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *FundamentalsHoldersData) SetDate(v string) {
	o.Date = &v
}

// GetTotalShares returns the TotalShares field value if set, zero value otherwise.
func (o *FundamentalsHoldersData) GetTotalShares() float64 {
	if o == nil || o.TotalShares == nil {
		var ret float64
		return ret
	}
	return *o.TotalShares
}

// GetTotalSharesOk returns a tuple with the TotalShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHoldersData) GetTotalSharesOk() (*float64, bool) {
	if o == nil || o.TotalShares == nil {
		return nil, false
	}
	return o.TotalShares, true
}

// HasTotalShares returns a boolean if a field has been set.
func (o *FundamentalsHoldersData) HasTotalShares() bool {
	if o != nil && o.TotalShares != nil {
		return true
	}

	return false
}

// SetTotalShares gets a reference to the given float64 and assigns it to the TotalShares field.
func (o *FundamentalsHoldersData) SetTotalShares(v float64) {
	o.TotalShares = &v
}

// GetTotalAssets returns the TotalAssets field value if set, zero value otherwise.
func (o *FundamentalsHoldersData) GetTotalAssets() float64 {
	if o == nil || o.TotalAssets == nil {
		var ret float64
		return ret
	}
	return *o.TotalAssets
}

// GetTotalAssetsOk returns a tuple with the TotalAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHoldersData) GetTotalAssetsOk() (*float64, bool) {
	if o == nil || o.TotalAssets == nil {
		return nil, false
	}
	return o.TotalAssets, true
}

// HasTotalAssets returns a boolean if a field has been set.
func (o *FundamentalsHoldersData) HasTotalAssets() bool {
	if o != nil && o.TotalAssets != nil {
		return true
	}

	return false
}

// SetTotalAssets gets a reference to the given float64 and assigns it to the TotalAssets field.
func (o *FundamentalsHoldersData) SetTotalAssets(v float64) {
	o.TotalAssets = &v
}

// GetCurrentShares returns the CurrentShares field value if set, zero value otherwise.
func (o *FundamentalsHoldersData) GetCurrentShares() int64 {
	if o == nil || o.CurrentShares == nil {
		var ret int64
		return ret
	}
	return *o.CurrentShares
}

// GetCurrentSharesOk returns a tuple with the CurrentShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHoldersData) GetCurrentSharesOk() (*int64, bool) {
	if o == nil || o.CurrentShares == nil {
		return nil, false
	}
	return o.CurrentShares, true
}

// HasCurrentShares returns a boolean if a field has been set.
func (o *FundamentalsHoldersData) HasCurrentShares() bool {
	if o != nil && o.CurrentShares != nil {
		return true
	}

	return false
}

// SetCurrentShares gets a reference to the given int64 and assigns it to the CurrentShares field.
func (o *FundamentalsHoldersData) SetCurrentShares(v int64) {
	o.CurrentShares = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *FundamentalsHoldersData) GetChange() int64 {
	if o == nil || o.Change == nil {
		var ret int64
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHoldersData) GetChangeOk() (*int64, bool) {
	if o == nil || o.Change == nil {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *FundamentalsHoldersData) HasChange() bool {
	if o != nil && o.Change != nil {
		return true
	}

	return false
}

// SetChange gets a reference to the given int64 and assigns it to the Change field.
func (o *FundamentalsHoldersData) SetChange(v int64) {
	o.Change = &v
}

// GetChangeP returns the ChangeP field value if set, zero value otherwise.
func (o *FundamentalsHoldersData) GetChangeP() float64 {
	if o == nil || o.ChangeP == nil {
		var ret float64
		return ret
	}
	return *o.ChangeP
}

// GetChangePOk returns a tuple with the ChangeP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHoldersData) GetChangePOk() (*float64, bool) {
	if o == nil || o.ChangeP == nil {
		return nil, false
	}
	return o.ChangeP, true
}

// HasChangeP returns a boolean if a field has been set.
func (o *FundamentalsHoldersData) HasChangeP() bool {
	if o != nil && o.ChangeP != nil {
		return true
	}

	return false
}

// SetChangeP gets a reference to the given float64 and assigns it to the ChangeP field.
func (o *FundamentalsHoldersData) SetChangeP(v float64) {
	o.ChangeP = &v
}

func (o FundamentalsHoldersData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.TotalShares != nil {
		toSerialize["totalShares"] = o.TotalShares
	}
	if o.TotalAssets != nil {
		toSerialize["totalAssets"] = o.TotalAssets
	}
	if o.CurrentShares != nil {
		toSerialize["currentShares"] = o.CurrentShares
	}
	if o.Change != nil {
		toSerialize["change"] = o.Change
	}
	if o.ChangeP != nil {
		toSerialize["change_p"] = o.ChangeP
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsHoldersData struct {
	value *FundamentalsHoldersData
	isSet bool
}

func (v NullableFundamentalsHoldersData) Get() *FundamentalsHoldersData {
	return v.value
}

func (v *NullableFundamentalsHoldersData) Set(val *FundamentalsHoldersData) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsHoldersData) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsHoldersData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsHoldersData(val *FundamentalsHoldersData) *NullableFundamentalsHoldersData {
	return &NullableFundamentalsHoldersData{value: val, isSet: true}
}

func (v NullableFundamentalsHoldersData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsHoldersData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
