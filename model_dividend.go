/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Dividend struct for Dividend
type Dividend struct {
	Date            *string  `json:"date,omitempty"`
	DeclarationDate *string  `json:"declarationDate,omitempty"`
	RecordDate      *string  `json:"recordDate,omitempty"`
	PaymentDate     *string  `json:"paymentDate,omitempty"`
	Period          *string  `json:"period,omitempty"`
	Value           *float64 `json:"value,omitempty"`
	UnadjustedValue *float64 `json:"unadjustedValue,omitempty"`
	Currency        *string  `json:"currency,omitempty"`
}

// NewDividend instantiates a new Dividend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDividend() *Dividend {
	this := Dividend{}
	return &this
}

// NewDividendWithDefaults instantiates a new Dividend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDividendWithDefaults() *Dividend {
	this := Dividend{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Dividend) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividend) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Dividend) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Dividend) SetDate(v string) {
	o.Date = &v
}

// GetDeclarationDate returns the DeclarationDate field value if set, zero value otherwise.
func (o *Dividend) GetDeclarationDate() string {
	if o == nil || o.DeclarationDate == nil {
		var ret string
		return ret
	}
	return *o.DeclarationDate
}

// GetDeclarationDateOk returns a tuple with the DeclarationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividend) GetDeclarationDateOk() (*string, bool) {
	if o == nil || o.DeclarationDate == nil {
		return nil, false
	}
	return o.DeclarationDate, true
}

// HasDeclarationDate returns a boolean if a field has been set.
func (o *Dividend) HasDeclarationDate() bool {
	if o != nil && o.DeclarationDate != nil {
		return true
	}

	return false
}

// SetDeclarationDate gets a reference to the given string and assigns it to the DeclarationDate field.
func (o *Dividend) SetDeclarationDate(v string) {
	o.DeclarationDate = &v
}

// GetRecordDate returns the RecordDate field value if set, zero value otherwise.
func (o *Dividend) GetRecordDate() string {
	if o == nil || o.RecordDate == nil {
		var ret string
		return ret
	}
	return *o.RecordDate
}

// GetRecordDateOk returns a tuple with the RecordDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividend) GetRecordDateOk() (*string, bool) {
	if o == nil || o.RecordDate == nil {
		return nil, false
	}
	return o.RecordDate, true
}

// HasRecordDate returns a boolean if a field has been set.
func (o *Dividend) HasRecordDate() bool {
	if o != nil && o.RecordDate != nil {
		return true
	}

	return false
}

// SetRecordDate gets a reference to the given string and assigns it to the RecordDate field.
func (o *Dividend) SetRecordDate(v string) {
	o.RecordDate = &v
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *Dividend) GetPaymentDate() string {
	if o == nil || o.PaymentDate == nil {
		var ret string
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividend) GetPaymentDateOk() (*string, bool) {
	if o == nil || o.PaymentDate == nil {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *Dividend) HasPaymentDate() bool {
	if o != nil && o.PaymentDate != nil {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given string and assigns it to the PaymentDate field.
func (o *Dividend) SetPaymentDate(v string) {
	o.PaymentDate = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Dividend) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividend) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Dividend) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *Dividend) SetPeriod(v string) {
	o.Period = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Dividend) GetValue() float64 {
	if o == nil || o.Value == nil {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividend) GetValueOk() (*float64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Dividend) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *Dividend) SetValue(v float64) {
	o.Value = &v
}

// GetUnadjustedValue returns the UnadjustedValue field value if set, zero value otherwise.
func (o *Dividend) GetUnadjustedValue() float64 {
	if o == nil || o.UnadjustedValue == nil {
		var ret float64
		return ret
	}
	return *o.UnadjustedValue
}

// GetUnadjustedValueOk returns a tuple with the UnadjustedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividend) GetUnadjustedValueOk() (*float64, bool) {
	if o == nil || o.UnadjustedValue == nil {
		return nil, false
	}
	return o.UnadjustedValue, true
}

// HasUnadjustedValue returns a boolean if a field has been set.
func (o *Dividend) HasUnadjustedValue() bool {
	if o != nil && o.UnadjustedValue != nil {
		return true
	}

	return false
}

// SetUnadjustedValue gets a reference to the given float64 and assigns it to the UnadjustedValue field.
func (o *Dividend) SetUnadjustedValue(v float64) {
	o.UnadjustedValue = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Dividend) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividend) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Dividend) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Dividend) SetCurrency(v string) {
	o.Currency = &v
}

func (o Dividend) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.DeclarationDate != nil {
		toSerialize["declarationDate"] = o.DeclarationDate
	}
	if o.RecordDate != nil {
		toSerialize["recordDate"] = o.RecordDate
	}
	if o.PaymentDate != nil {
		toSerialize["paymentDate"] = o.PaymentDate
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.UnadjustedValue != nil {
		toSerialize["unadjustedValue"] = o.UnadjustedValue
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableDividend struct {
	value *Dividend
	isSet bool
}

func (v NullableDividend) Get() *Dividend {
	return v.value
}

func (v *NullableDividend) Set(val *Dividend) {
	v.value = val
	v.isSet = true
}

func (v NullableDividend) IsSet() bool {
	return v.isSet
}

func (v *NullableDividend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDividend(val *Dividend) *NullableDividend {
	return &NullableDividend{value: val, isSet: true}
}

func (v NullableDividend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDividend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
