/*
 * eodhistoricaldata
 *
 * eodhistoricaldata API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsGeneralAddressData struct for FundamentalsGeneralAddressData
type FundamentalsGeneralAddressData struct {
	Street  *string `json:"Street,omitempty"`
	City    *string `json:"City,omitempty"`
	State   *string `json:"State,omitempty"`
	Country *string `json:"Country,omitempty"`
	ZIP     *string `json:"ZIP,omitempty"`
}

// NewFundamentalsGeneralAddressData instantiates a new FundamentalsGeneralAddressData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsGeneralAddressData() *FundamentalsGeneralAddressData {
	this := FundamentalsGeneralAddressData{}
	return &this
}

// NewFundamentalsGeneralAddressDataWithDefaults instantiates a new FundamentalsGeneralAddressData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsGeneralAddressDataWithDefaults() *FundamentalsGeneralAddressData {
	this := FundamentalsGeneralAddressData{}
	return &this
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *FundamentalsGeneralAddressData) GetStreet() string {
	if o == nil || o.Street == nil {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralAddressData) GetStreetOk() (*string, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *FundamentalsGeneralAddressData) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *FundamentalsGeneralAddressData) SetStreet(v string) {
	o.Street = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *FundamentalsGeneralAddressData) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralAddressData) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *FundamentalsGeneralAddressData) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *FundamentalsGeneralAddressData) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FundamentalsGeneralAddressData) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralAddressData) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FundamentalsGeneralAddressData) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *FundamentalsGeneralAddressData) SetState(v string) {
	o.State = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *FundamentalsGeneralAddressData) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralAddressData) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *FundamentalsGeneralAddressData) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *FundamentalsGeneralAddressData) SetCountry(v string) {
	o.Country = &v
}

// GetZIP returns the ZIP field value if set, zero value otherwise.
func (o *FundamentalsGeneralAddressData) GetZIP() string {
	if o == nil || o.ZIP == nil {
		var ret string
		return ret
	}
	return *o.ZIP
}

// GetZIPOk returns a tuple with the ZIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsGeneralAddressData) GetZIPOk() (*string, bool) {
	if o == nil || o.ZIP == nil {
		return nil, false
	}
	return o.ZIP, true
}

// HasZIP returns a boolean if a field has been set.
func (o *FundamentalsGeneralAddressData) HasZIP() bool {
	if o != nil && o.ZIP != nil {
		return true
	}

	return false
}

// SetZIP gets a reference to the given string and assigns it to the ZIP field.
func (o *FundamentalsGeneralAddressData) SetZIP(v string) {
	o.ZIP = &v
}

func (o FundamentalsGeneralAddressData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Street != nil {
		toSerialize["Street"] = o.Street
	}
	if o.City != nil {
		toSerialize["City"] = o.City
	}
	if o.State != nil {
		toSerialize["State"] = o.State
	}
	if o.Country != nil {
		toSerialize["Country"] = o.Country
	}
	if o.ZIP != nil {
		toSerialize["ZIP"] = o.ZIP
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsGeneralAddressData struct {
	value *FundamentalsGeneralAddressData
	isSet bool
}

func (v NullableFundamentalsGeneralAddressData) Get() *FundamentalsGeneralAddressData {
	return v.value
}

func (v *NullableFundamentalsGeneralAddressData) Set(val *FundamentalsGeneralAddressData) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsGeneralAddressData) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsGeneralAddressData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsGeneralAddressData(val *FundamentalsGeneralAddressData) *NullableFundamentalsGeneralAddressData {
	return &NullableFundamentalsGeneralAddressData{value: val, isSet: true}
}

func (v NullableFundamentalsGeneralAddressData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsGeneralAddressData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
