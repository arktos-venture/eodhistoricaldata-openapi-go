/*
eodhistoricaldata

eodhistoricaldata API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsHolders struct for FundamentalsHolders
type FundamentalsHolders struct {
	Institutions *map[string]FundamentalsHoldersData `json:"Institutions,omitempty"`
	Funds        *map[string]FundamentalsHoldersData `json:"Funds,omitempty"`
}

// NewFundamentalsHolders instantiates a new FundamentalsHolders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsHolders() *FundamentalsHolders {
	this := FundamentalsHolders{}
	return &this
}

// NewFundamentalsHoldersWithDefaults instantiates a new FundamentalsHolders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsHoldersWithDefaults() *FundamentalsHolders {
	this := FundamentalsHolders{}
	return &this
}

// GetInstitutions returns the Institutions field value if set, zero value otherwise.
func (o *FundamentalsHolders) GetInstitutions() map[string]FundamentalsHoldersData {
	if o == nil || o.Institutions == nil {
		var ret map[string]FundamentalsHoldersData
		return ret
	}
	return *o.Institutions
}

// GetInstitutionsOk returns a tuple with the Institutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHolders) GetInstitutionsOk() (*map[string]FundamentalsHoldersData, bool) {
	if o == nil || o.Institutions == nil {
		return nil, false
	}
	return o.Institutions, true
}

// HasInstitutions returns a boolean if a field has been set.
func (o *FundamentalsHolders) HasInstitutions() bool {
	if o != nil && o.Institutions != nil {
		return true
	}

	return false
}

// SetInstitutions gets a reference to the given map[string]FundamentalsHoldersData and assigns it to the Institutions field.
func (o *FundamentalsHolders) SetInstitutions(v map[string]FundamentalsHoldersData) {
	o.Institutions = &v
}

// GetFunds returns the Funds field value if set, zero value otherwise.
func (o *FundamentalsHolders) GetFunds() map[string]FundamentalsHoldersData {
	if o == nil || o.Funds == nil {
		var ret map[string]FundamentalsHoldersData
		return ret
	}
	return *o.Funds
}

// GetFundsOk returns a tuple with the Funds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsHolders) GetFundsOk() (*map[string]FundamentalsHoldersData, bool) {
	if o == nil || o.Funds == nil {
		return nil, false
	}
	return o.Funds, true
}

// HasFunds returns a boolean if a field has been set.
func (o *FundamentalsHolders) HasFunds() bool {
	if o != nil && o.Funds != nil {
		return true
	}

	return false
}

// SetFunds gets a reference to the given map[string]FundamentalsHoldersData and assigns it to the Funds field.
func (o *FundamentalsHolders) SetFunds(v map[string]FundamentalsHoldersData) {
	o.Funds = &v
}

func (o FundamentalsHolders) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Institutions != nil {
		toSerialize["Institutions"] = o.Institutions
	}
	if o.Funds != nil {
		toSerialize["Funds"] = o.Funds
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsHolders struct {
	value *FundamentalsHolders
	isSet bool
}

func (v NullableFundamentalsHolders) Get() *FundamentalsHolders {
	return v.value
}

func (v *NullableFundamentalsHolders) Set(val *FundamentalsHolders) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsHolders) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsHolders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsHolders(val *FundamentalsHolders) *NullableFundamentalsHolders {
	return &NullableFundamentalsHolders{value: val, isSet: true}
}

func (v NullableFundamentalsHolders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsHolders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
