/*
eodhistoricaldata

eodhistoricaldata API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalsOutstandingShares struct for FundamentalsOutstandingShares
type FundamentalsOutstandingShares struct {
	Annual    *map[string]FundamentalsOutstandingSharesData `json:"annual,omitempty"`
	Quarterly *map[string]FundamentalsOutstandingSharesData `json:"quarterly,omitempty"`
}

// NewFundamentalsOutstandingShares instantiates a new FundamentalsOutstandingShares object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsOutstandingShares() *FundamentalsOutstandingShares {
	this := FundamentalsOutstandingShares{}
	return &this
}

// NewFundamentalsOutstandingSharesWithDefaults instantiates a new FundamentalsOutstandingShares object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsOutstandingSharesWithDefaults() *FundamentalsOutstandingShares {
	this := FundamentalsOutstandingShares{}
	return &this
}

// GetAnnual returns the Annual field value if set, zero value otherwise.
func (o *FundamentalsOutstandingShares) GetAnnual() map[string]FundamentalsOutstandingSharesData {
	if o == nil || o.Annual == nil {
		var ret map[string]FundamentalsOutstandingSharesData
		return ret
	}
	return *o.Annual
}

// GetAnnualOk returns a tuple with the Annual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsOutstandingShares) GetAnnualOk() (*map[string]FundamentalsOutstandingSharesData, bool) {
	if o == nil || o.Annual == nil {
		return nil, false
	}
	return o.Annual, true
}

// HasAnnual returns a boolean if a field has been set.
func (o *FundamentalsOutstandingShares) HasAnnual() bool {
	if o != nil && o.Annual != nil {
		return true
	}

	return false
}

// SetAnnual gets a reference to the given map[string]FundamentalsOutstandingSharesData and assigns it to the Annual field.
func (o *FundamentalsOutstandingShares) SetAnnual(v map[string]FundamentalsOutstandingSharesData) {
	o.Annual = &v
}

// GetQuarterly returns the Quarterly field value if set, zero value otherwise.
func (o *FundamentalsOutstandingShares) GetQuarterly() map[string]FundamentalsOutstandingSharesData {
	if o == nil || o.Quarterly == nil {
		var ret map[string]FundamentalsOutstandingSharesData
		return ret
	}
	return *o.Quarterly
}

// GetQuarterlyOk returns a tuple with the Quarterly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsOutstandingShares) GetQuarterlyOk() (*map[string]FundamentalsOutstandingSharesData, bool) {
	if o == nil || o.Quarterly == nil {
		return nil, false
	}
	return o.Quarterly, true
}

// HasQuarterly returns a boolean if a field has been set.
func (o *FundamentalsOutstandingShares) HasQuarterly() bool {
	if o != nil && o.Quarterly != nil {
		return true
	}

	return false
}

// SetQuarterly gets a reference to the given map[string]FundamentalsOutstandingSharesData and assigns it to the Quarterly field.
func (o *FundamentalsOutstandingShares) SetQuarterly(v map[string]FundamentalsOutstandingSharesData) {
	o.Quarterly = &v
}

func (o FundamentalsOutstandingShares) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Annual != nil {
		toSerialize["annual"] = o.Annual
	}
	if o.Quarterly != nil {
		toSerialize["quarterly"] = o.Quarterly
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalsOutstandingShares struct {
	value *FundamentalsOutstandingShares
	isSet bool
}

func (v NullableFundamentalsOutstandingShares) Get() *FundamentalsOutstandingShares {
	return v.value
}

func (v *NullableFundamentalsOutstandingShares) Set(val *FundamentalsOutstandingShares) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsOutstandingShares) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsOutstandingShares) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsOutstandingShares(val *FundamentalsOutstandingShares) *NullableFundamentalsOutstandingShares {
	return &NullableFundamentalsOutstandingShares{value: val, isSet: true}
}

func (v NullableFundamentalsOutstandingShares) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsOutstandingShares) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
